/*
 * This file was automatically generated by EvoSuite
 * Fri May 30 18:12:33 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.Abdominais;
import com.mycompany.solucao1.Atividade;
import com.mycompany.solucao1.BenchPress;
import com.mycompany.solucao1.BicepCurls;
import com.mycompany.solucao1.Ciclismo;
import com.mycompany.solucao1.Flexoes;
import com.mycompany.solucao1.PlanoTreino;
import com.mycompany.solucao1.Utilizador;
import com.mycompany.solucao1.UtilizadorAmador;
import com.mycompany.solucao1.UtilizadorPraticanteOcasional;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setGenero('Z');
      utilizadorProfissional0.equals(utilizadorProfissional1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      utilizadorProfissional1.setAltura((-3540));
      utilizadorProfissional1.equals(utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setPeso((-5L));
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      utilizadorProfissional0.equals(utilizadorProfissional1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      utilizadorProfissional1.setFreqCardiaca(24);
      utilizadorProfissional0.equals(utilizadorProfissional1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setCodUtilizador(10);
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      utilizadorProfissional1.equals(utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1626L));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("[!Iz8i2jY", (String) null, "[!Iz8i2jY", 0, 0, (-1), localDate0, '&');
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate1 = MockLocalDate.now(clock0);
      // Undeclared exception!
      try { 
        utilizadorAmador0.planoTreinoMaisCalorias(localDate1, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("io*~dbk3!j", "io*~dbk3!j", "io*~dbk3!j", 97, 1, 102, (LocalDate) null, ']');
      LocalDate localDate0 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.allMetrosAltimetria((LocalDate) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate1 = MockLocalDate.now(clock0);
      utilizadorAmador0.allKmsDistancia(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      utilizadorAmador0.getPlanoTreinoId((-443));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Period period0 = Period.ofDays((-2636));
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", (-2636), (-2636), (-2636), localDate0, '}');
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorPraticanteOcasional0.addAtividadePlanoTreino('}', bicepCurls0, (-2636));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 4756, 4756, 4756, localDate0, '@');
      utilizadorAmador0.utilizadorNumPeriodo(localDate0, localDate0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.toString();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate1 = MockLocalDate.now(clock0);
      utilizadorAmador0.planosTreinos(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Period period0 = Period.of((-2636), 6, (-2636));
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(6);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0);
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorPraticanteOcasional0.addAtividade(bicepCurls0);
      utilizadorPraticanteOcasional0.numeroAtividades(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("_O8]? 7VtSfm&0?!(K", "_O8]? 7VtSfm&0?!(K", "", 1, 1, (-1137), localDate0, '0');
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      utilizadorPraticanteOcasional0.addPlanoTreino(planoTreino0);
      utilizadorPraticanteOcasional0.getPlanoTreinoId(1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.getPeso();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("!", "!", "!", 'c', 2, 2, localDate0, 'c');
      utilizadorProfissional0.getPeso();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, "3^v(V\"Tmq<DVbd", "3^v(V\"Tmq<DVbd", 757, 0, 757, localDate0, 'i');
      utilizadorAmador0.getNome();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 5, 38, 3, localDate0, 'N');
      utilizadorAmador0.setNome("X@");
      utilizadorAmador0.getNome();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1838L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Ha", "|L", "Ha", 0, 0, 0, localDate0, 'O');
      utilizadorAmador0.getMorada();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.getMorada();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.getIdade();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      System.setCurrentTimeMillis((-1L));
      utilizadorPraticanteOcasional0.getIdade();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.getGenero();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("+N", "+N", "+N", 0, 31, 31, localDate0, 't');
      utilizadorProfissional0.getGenero();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.getFreqCardiaca();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional(";sk:{P0x", ";sk:{P0x", ";sk:{P0x", (-1284), 2399, 552, (LocalDate) null, 'W');
      utilizadorPraticanteOcasional0.getFreqCardiaca();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 5, 38, 3, localDate0, 'N');
      utilizadorAmador0.getFatorMultiplicativo();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(626, 10);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, "I|80_aQm)9", (String) null, 0, 10, 626, localDate0, '#');
      utilizadorPraticanteOcasional0.getEmail();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("muLIR-_mZjk", "muLIR-_mZjk", "muLIR-_mZjk", (-1686), (-958), 0, (LocalDate) null, '`');
      utilizadorAmador0.getEmail();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("ncj", "", "\nAtividades: \n", 1, 1908874353, 6, (LocalDate) null, 't');
      utilizadorProfissional0.getDataNascimento();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.getCodUtilizador();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Period period0 = Period.of(5, 6, 50);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", " ^oq$^nj", (-2636), (-2636), (-75), localDate0, '}');
      utilizadorPraticanteOcasional0.setProximoCodigo((-75));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador(" centimetr{s\nData de nascimento ", "ue_6", "", 5, 4, (-2447), localDate0, 'l');
      utilizadorAmador0.getCodUtilizador();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.getBMR();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      utilizadorAmador0.getAtividadesPlanoTreino();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.getAtividadesIsoladas();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.getAltura();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", (String) null, "", (-2193), (-123), (-123), localDate0, 'r');
      utilizadorPraticanteOcasional0.getAltura();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", 46, 46, 960, localDate0, '(');
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setEmail("");
      utilizadorProfissional1.equals(utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.clone();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Period period0 = Period.of(5, 6, 50);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", " ^oq$^nj", (-2636), (-2636), (-75), localDate0, '}');
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorPraticanteOcasional0.addAtividade(bicepCurls0);
      utilizadorPraticanteOcasional0.allAtividades(localDate0, localDate0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", 5, 4311, 5, (LocalDate) null, 'b');
      // Undeclared exception!
      try { 
        utilizadorProfissional0.utilizadorNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.totalCaloriasDispendidas((LocalDate) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Period period0 = Period.of((-2636), 6, (-2636));
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(6);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0);
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorPraticanteOcasional0.addAtividade(bicepCurls0);
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.totalCaloriasDispendidas(localDate1, localDate0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mycompany.solucao1.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      // Undeclared exception!
      try { 
        utilizadorAmador0.planosTreinos(localDate0, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.numeroAtividades((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1532L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "jBh+wh7le<*2", "", (-113), (-113), 1, localDate0, 'X');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) null);
      BiFunction<Atividade, Utilizador, Flexoes> biFunction0 = (BiFunction<Atividade, Utilizador, Flexoes>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        utilizadorAmador0.infoDasAtividadesUtilizadorNumPeriodoQueRespeitamP((LocalDate) null, localDate0, (Predicate<Atividade>) predicate0, (BiFunction<Atividade, Utilizador, Flexoes>) biFunction0, (Utilizador) utilizadorProfissional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorPraticanteOcasional0);
      Function<Atividade, Abdominais> function0 = (Function<Atividade, Abdominais>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.infoDasAtividadesNumPeriodoQueRespeitamP((LocalDate) null, (LocalDate) null, (Predicate<Atividade>) predicate0, (Function<Atividade, Abdominais>) function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("VN&=ncwu]$._Z", "Lm4x(9?", "VN&=ncwu]$._Z", 0, 0, 0, (LocalDate) null, '_');
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.getIdade();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("muLIR-_mZjk", "muLIR-_mZjk", "muLIR-_mZjk", (-1686), (-958), 0, (LocalDate) null, '`');
      // Undeclared exception!
      try { 
        utilizadorAmador0.getBMR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      BicepCurls bicepCurls0 = new BicepCurls();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) bicepCurls0);
      // Undeclared exception!
      try { 
        utilizadorProfissional0.atividadesNumPeriodoQueRespeitamP((LocalDate) null, (LocalDate) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(0, 5);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Y1hwj?)4,Y>V", (String) null, "2T!PrWu@>7q)V", 0, 0, 0, localDate0, ' ');
      Abdominais abdominais0 = new Abdominais();
      utilizadorProfissional0.addAtividade(abdominais0);
      // Undeclared exception!
      try { 
        utilizadorProfissional0.atividadesIsoladas(localDate0, localDate0, (Predicate<Atividade>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        utilizadorAmador0.allKmsDistancia((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      Ciclismo ciclismo0 = new Ciclismo();
      planoTreino0.addAtividade(ciclismo0, 429496730);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-28L));
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      // Undeclared exception!
      utilizadorAmador0.allAtividades(localDate0, localDate0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      Ciclismo ciclismo0 = new Ciclismo();
      ciclismo0.setDataRealizacao((LocalDateTime) null);
      planoTreino0.addAtividade(ciclismo0, 429496730);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-28L));
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      // Undeclared exception!
      try { 
        utilizadorAmador0.allAtividades(localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.addPlanoTreino((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("ncj", "", "\nAtividades: \n", 1, 1908874353, 6, (LocalDate) null, 't');
      // Undeclared exception!
      try { 
        utilizadorProfissional0.addAtividade((Atividade) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(0, 5);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Y1hwj?)4,Y>V", (String) null, "2T!PrWu@>7q)V", 0, 0, 0, localDate0, ' ');
      utilizadorProfissional0.getBMR();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, (String) null, (String) null, (-1), (-1), (-4009), localDate0, '7');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorProfissional0);
      Function<Atividade, Integer> function0 = (Function<Atividade, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      utilizadorProfissional0.infoDasAtividadesNumPeriodoQueRespeitamP(localDate0, localDate0, (Predicate<Atividade>) predicate0, (Function<Atividade, Integer>) function0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, (String) null, (String) null, (-1), (-1), (-4009), localDate0, '7');
      utilizadorProfissional0.getGenero();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", (String) null, "", (-2193), (-123), (-123), localDate0, 'r');
      utilizadorPraticanteOcasional0.getMorada();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", 46, 46, 960, localDate0, '(');
      utilizadorProfissional0.getFreqCardiaca();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.getAtividadesPlanoTreino();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(3, 3);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("+mQG|&@QS", "+mQG|&@QS", "qBd9Nq,nfM [eHu1H", 3, 3, 3, localDate0, '(');
      utilizadorPraticanteOcasional0.getIdade();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 5, 38, 3, localDate0, 'N');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) "");
      utilizadorAmador0.atividadesIsoladas(localDate0, localDate0, predicate0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.getDataNascimento();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("EFIs'Y'{XVLz]iW=", "", "EFIs'Y'{XVLz]iW=", (-2309), (-2309), 1, localDate0, '_');
      utilizadorAmador0.getAltura();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 5, 38, 3, localDate0, 'N');
      utilizadorAmador0.getNome();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(3, 3);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("+mQG|&@QS", "+mQG|&@QS", "qBd9Nq,nfM [eHu1H", 3, 3, 3, localDate0, '(');
      utilizadorPraticanteOcasional0.planosTreinos(localDate0, localDate0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-2651));
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", (String) null, (-2607), (-2651), (-2607), localDate0, 'u');
      utilizadorProfissional0.getCodUtilizador();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional(".WfI*CsgG'Y9XTf7", "!", ".WfI*CsgG'Y9XTf7", (-1932), (-1391), 2, localDate0, 'c');
      utilizadorProfissional0.getPeso();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.getEmail();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", 46, 46, 960, localDate0, '(');
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0, localDate0, localDate0);
      utilizadorProfissional0.equals(utilizadorProfissional1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      System.setCurrentTimeMillis((-1L));
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      utilizadorProfissional0.equals(utilizadorProfissional1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setAltura(3035);
      utilizadorProfissional1.equals(utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      utilizadorProfissional1.setPeso(1172.60866);
      utilizadorProfissional1.equals(utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setFreqCardiaca((-3695));
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      utilizadorProfissional1.equals(utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      utilizadorProfissional1.setEmail("Utilizador\nCodigo de Utilizador: 0\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: \u0000\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Profissional\n");
      utilizadorProfissional0.equals(utilizadorProfissional1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      utilizadorProfissional0.setMorada("sN%7T)I^':,");
      utilizadorProfissional0.equals(utilizadorProfissional1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      utilizadorProfissional0.setNome("Plano de Treino\nCodigo de Pano de Treino: ");
      utilizadorProfissional1.equals(utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("%R", "\nFrequencia Cardiaca: ", "(S=W`WS{}9,?3m", (-471), (-471), 698, (LocalDate) null, 'w');
      Object object0 = utilizadorPraticanteOcasional0.clone();
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setGenero('Y');
      utilizadorProfissional1.equals(utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      utilizadorAmador0.toString();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Ciclismo ciclismo0 = new Ciclismo();
      utilizadorAmador0.addAtividade(ciclismo0);
      utilizadorAmador0.toString();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("75Dk3g,", "75Dk3g,", "75Dk3g,", (-8), (-8), (-8), localDate0, 'F');
      utilizadorProfissional0.getBMR();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.setGenero('M');
      utilizadorAmador0.getBMR();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-28L));
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      Period period0 = Period.of(0, (-2892), (-2892));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino0);
      utilizadorAmador0.atividadesNumPeriodoQueRespeitamP(localDate0, localDate1, predicate0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(777);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("0]S \"j<Jw", "0]S \"j<Jw", "zD", 777, 3013, 777, localDate0, '/');
      BenchPress benchPress0 = new BenchPress();
      utilizadorPraticanteOcasional0.addAtividade(benchPress0);
      PlanoTreino planoTreino0 = utilizadorPraticanteOcasional0.getPlanoTreinoId('/');
      List<Atividade> list0 = utilizadorPraticanteOcasional0.getAtividadesIsoladas();
      planoTreino0.geraPlanoTreino(utilizadorPraticanteOcasional0, list0, 777, 1792, 1792, localDate0);
      assertEquals(3013.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(777, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(777, utilizadorPraticanteOcasional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(777);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("0]S \"j<Jw", "0]S \"j<Jw", "zD", 777, 3013, 777, localDate0, '/');
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("zD", "Xg'n?Gw~q+Iu.RL#K", "\nAtividades: \n", 3013, '/', 196, localDate0, '/');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorPraticanteOcasional0);
      BiFunction<Atividade, Utilizador, UtilizadorProfissional> biFunction0 = (BiFunction<Atividade, Utilizador, UtilizadorProfissional>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      utilizadorProfissional0.infoDasAtividadesUtilizadorNumPeriodoQueRespeitamP(localDate0, localDate0, (Predicate<Atividade>) predicate0, (BiFunction<Atividade, Utilizador, UtilizadorProfissional>) biFunction0, (Utilizador) utilizadorProfissional0);
      assertEquals(47.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals('/', utilizadorProfissional0.getGenero());
      assertEquals("\nAtividades: \n", utilizadorProfissional0.getEmail());
      assertEquals(2, utilizadorProfissional0.getCodUtilizador());
      assertEquals("zD", utilizadorProfissional0.getNome());
      assertEquals(3013, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(196, utilizadorProfissional0.getAltura());
      assertEquals("Xg'n?Gw~q+Iu.RL#K", utilizadorProfissional0.getMorada());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      utilizadorAmador0.getPlanoTreinoId(421);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorPraticanteOcasional0.addAtividade(bicepCurls0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = (UtilizadorPraticanteOcasional)utilizadorPraticanteOcasional0.clone();
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorPraticanteOcasional1.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional1.getFreqCardiaca());
      assertTrue(utilizadorPraticanteOcasional1.equals((Object)utilizadorPraticanteOcasional0));
      assertEquals(0, utilizadorPraticanteOcasional1.getAltura());
      assertEquals(0, utilizadorPraticanteOcasional1.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      UtilizadorAmador utilizadorAmador1 = (UtilizadorAmador)utilizadorAmador0.clone();
      assertEquals(0, utilizadorAmador1.getCodUtilizador());
      assertEquals(0, utilizadorAmador1.getFreqCardiaca());
      assertTrue(utilizadorAmador1.equals((Object)utilizadorAmador0));
      assertEquals(0, utilizadorAmador1.getAltura());
      assertEquals('\u0000', utilizadorAmador1.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.addAtividadePlanoTreino(1742, (Atividade) null, 70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Period period0 = Period.of((-2636), 6, (-2636));
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(6);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.numeroAtividades(localDate0, localDate0);
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", (String) null, "", (-2193), (-123), (-123), localDate0, 'r');
      double double0 = utilizadorPraticanteOcasional0.totalCaloriasDispendidas(localDate0, localDate0);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals((-123.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals('r', utilizadorPraticanteOcasional0.getGenero());
      assertEquals((-123), utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2193), utilizadorPraticanteOcasional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setDataNascimento((LocalDate) null);
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setCodUtilizador(10);
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals(10, utilizadorProfissional0.getCodUtilizador());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1626L));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("[!Iz8i2jY", (String) null, "[!Iz8i2jY", 0, 0, (-1), localDate0, '&');
      utilizadorAmador0.allMetrosAltimetria(localDate0, localDate0);
      assertEquals('&', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals((-1), utilizadorAmador0.getAltura());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-28L));
      utilizadorAmador0.allAtividades(localDate0, localDate0);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }
}
