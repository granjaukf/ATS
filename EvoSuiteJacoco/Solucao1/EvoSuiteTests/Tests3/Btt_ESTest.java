/*
 * This file was automatically generated by EvoSuite
 * Fri May 30 18:22:24 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.BicepCurls;
import com.mycompany.solucao1.Btt;
import com.mycompany.solucao1.PlanoTreino;
import com.mycompany.solucao1.Utilizador;
import com.mycompany.solucao1.UtilizadorAmador;
import com.mycompany.solucao1.UtilizadorPraticanteOcasional;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.TextStyle;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Btt_ESTest extends Btt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setAltimetria(2140078521);
      double double0 = btt0.getFatorHard();
      assertEquals(1.2500000000000002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Btt btt0 = new Btt();
      boolean boolean0 = btt0.equals(btt0);
      boolean boolean1 = btt0.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setProximoCodigo((-3062));
      Btt btt1 = new Btt(btt0);
      btt1.getFatorVelocidade(1000.0, 0.0);
      btt1.clone();
      double double0 = btt1.getFatorHard();
      assertEquals(1.05, double0, 0.01);
      
      String string0 = btt0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n", string0);
      
      Object object0 = btt0.clone();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Btt btt2 = (Btt)btt0.geraAtividade(utilizadorPraticanteOcasional0, (-3062));
      assertEquals((-2.2548578304E10), btt2.getDistancia(), 0.01);
      assertNotSame(btt0, object0);
      assertEquals(0.0, btt2.getFatorAltimetria(), 0.01);
      assertEquals(0, btt2.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Btt btt0 = new Btt(localDateTime0, localTime0, (-1), (-1), 0);
      btt0.getFatorHard();
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      zoneOffset0.getDisplayName(textStyle0, locale0);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, "TmT2k4", "TmT2k4", 938, 1, 0, localDate0, '%');
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      UtilizadorProfissional utilizadorProfissional2 = new UtilizadorProfissional(utilizadorProfissional1, localDate0, localDate0);
      double double0 = btt0.consumoCalorias(utilizadorProfissional2);
      assertEquals((-33454.621381076395), double0, 0.01);
      
      boolean boolean0 = btt0.equals(localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Btt btt0 = new Btt();
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("5VA:y,Hx<*%}", "[D5iFx", "5VA:y,Hx<*%}", (-134), (-134), (-134), localDate0, '{');
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorPraticanteOcasional0, (-134));
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals(4462.5, btt1.getDistancia(), 0.01);
      assertEquals(0.0, btt1.getFatorAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(336L);
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 9, 9, (-1574.40114));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      double double0 = btt0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1.05, btt0.getFatorHard(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1L);
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, (-3206), (-3206), 1L);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("net.bytebuddy.dump", "net.bytebuddy.dump", "net.bytebuddy.dump", 0, (-50), (-3206), localDate0, '4');
      double double0 = btt0.consumoCalorias(utilizadorProfissional0);
      assertEquals(881.3302657335071, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Btt btt0 = new Btt();
      Utilizador utilizador0 = null;
      int int0 = (-685);
      btt0.setProximoCodigo((-109));
      btt0.setFreqCardiaca((-685));
      btt0.toString();
      // Undeclared exception!
      try { 
        btt0.geraAtividade((Utilizador) null, 1741.63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Btt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Btt btt0 = null;
      Btt btt1 = null;
      try {
        btt1 = new Btt((Btt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 70, 0.0, 0.0);
      // Undeclared exception!
      try { 
        btt0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = new Btt(btt0);
      btt0.clone();
      String string0 = "zKkasEbs\"H;9|b4(|";
      // Undeclared exception!
      try { 
        btt1.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Btt", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(18, 18, 18, 18);
      Btt btt0 = new Btt(localDateTime0, localTime0, 18, 18, 18);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = btt0.consumoCalorias(utilizadorProfissional0);
      assertEquals(1.05, btt0.getFatorHard(), 0.01);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Btt btt0 = new Btt(localDateTime0, localTime0, 2145376996, 0L, 2000.0);
      Btt btt1 = (Btt)btt0.clone();
      double double0 = btt1.getFatorHard();
      assertEquals(1.1500000000000001, double0, 0.01);
      
      String string0 = btt0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 2145376996 bpm\nDistancia: 0.0 metros\nAltimetria: 2000.0 metros\nTipo de atividade: BTT\n", string0);
      assertNotSame(btt0, btt1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.getFatorVelocidade(0.0, 0.0);
      btt0.setDistancia(Double.NaN);
      btt0.getFatorVelocidade((-418.115839022), 2795.1);
      btt0.setProximoCodigo(0);
      btt0.toString();
      btt0.equals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: NaN metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n");
      btt0.toString();
      Object object0 = btt0.clone();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      btt0.geraAtividade(utilizadorPraticanteOcasional0, Double.NaN);
      btt0.clone();
      btt0.equals(object0);
      btt0.toString();
      btt0.getFatorHard();
      btt0.geraAtividade(utilizadorPraticanteOcasional0, 0.0);
      btt0.getFatorHard();
      btt0.getFatorHard();
      // Undeclared exception!
      try { 
        btt0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDateTime localDateTime0 = null;
      long long0 = 1L;
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1L);
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 1, 1, (-1253.499950161115));
      btt0.getFatorVelocidade(1, 1);
      btt0.setAltimetria((-1253.499950161115));
      Btt btt1 = new Btt(btt0);
      // Undeclared exception!
      try { 
        btt0.equals(btt1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Btt btt0 = new Btt();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorPraticanteOcasional0.addAtividade(bicepCurls0);
      Btt btt1 = new Btt(btt0);
      utilizadorPraticanteOcasional0.addAtividadePlanoTreino(1, btt1, 70);
      // Undeclared exception!
      try { 
        btt0.geraAtividade(utilizadorPraticanteOcasional0, 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.mycompany.solucao1.BicepCurls cannot be cast to com.mycompany.solucao1.Btt
         //
         verifyException("com.mycompany.solucao1.Btt", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = (-1L);
      System.setCurrentTimeMillis((-1L));
      Btt btt0 = new Btt();
      int int0 = (-2021);
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      btt0.clone();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("U*ktY|EeB1@C%st$U5", "U*ktY|EeB1@C%st$U5", "", (-2021), (-2021), (-2021), localDate0, 'Y');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.toString();
      planoTreino0.addAtividade(btt0, 1431591114);
      planoTreino0.setDataRealizacao(localDate0);
      utilizadorAmador1.addPlanoTreino(planoTreino0);
      double double0 = 86400.0;
      // Undeclared exception!
      btt0.geraAtividade(utilizadorAmador1, 86400.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Btt btt0 = new Btt();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        btt0.consumoCalorias(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Btt btt0 = new Btt();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorProfissional0, (-571.0));
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals((-2.2548578304E10), btt1.getDistancia(), 0.01);
      assertEquals(0.0, btt1.getFatorAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Btt btt0 = new Btt();
      String string0 = btt0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = new Btt(btt0);
      boolean boolean0 = btt0.equals(btt1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(2, 2, 2, 2);
      Btt btt0 = new Btt(localDateTime0, localTime0, 2145241034, 0.1, 1000.0);
      double double0 = btt0.getFatorHard();
      assertEquals(1.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Btt btt0 = new Btt();
      Object object0 = btt0.clone();
      assertNotSame(object0, btt0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Btt btt0 = new Btt((LocalDateTime) null, (LocalTime) null, 1079, 1079, 1079);
      double double0 = btt0.getFatorHard();
      assertEquals(1.1500000000000001, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Btt btt0 = new Btt((LocalDateTime) null, (LocalTime) null, 1095, 1095, 1095);
      double double0 = btt0.getFatorHard();
      assertEquals(1.1500000000000001, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(50L);
      Btt btt0 = new Btt(localDateTime0, localTime0, 707, 50L, 50L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      boolean boolean0 = btt0.equals("");
      assertFalse(boolean0);
      
      Btt btt1 = (Btt)btt0.clone();
      btt0.equals(btt1);
      btt1.toString();
      double double0 = btt0.consumoCalorias(utilizadorAmador0);
      assertEquals(-0.0, double0, 0.01);
      
      Btt btt2 = (Btt)btt1.geraAtividade(utilizadorAmador0, 707);
      assertEquals(1.05, btt1.getFatorHard(), 0.01);
      assertEquals(0.0, btt2.getAltimetria(), 0.01);
      assertEquals(2.25485782935E10, btt2.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setAltimetria(2140078346);
      double double0 = btt0.getFatorHard();
      assertEquals(1.2500000000000002, double0, 0.01);
  }
}
