/*
 * This file was automatically generated by EvoSuite
 * Tue May 27 00:33:14 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.Abdominais;
import com.mycompany.solucao1.Atividade;
import com.mycompany.solucao1.BicepCurls;
import com.mycompany.solucao1.Btt;
import com.mycompany.solucao1.Ciclismo;
import com.mycompany.solucao1.Corrida;
import com.mycompany.solucao1.Flexoes;
import com.mycompany.solucao1.LegPress;
import com.mycompany.solucao1.PlanoTreino;
import com.mycompany.solucao1.Trail;
import com.mycompany.solucao1.Utilizador;
import com.mycompany.solucao1.UtilizadorAmador;
import com.mycompany.solucao1.UtilizadorPraticanteOcasional;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.OffsetDateTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.HijrahDate;
import java.time.chrono.IsoChronology;
import java.time.chrono.MinguoDate;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlanoTreino_ESTest extends PlanoTreino_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida(corrida0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((-821), corrida1);
      planoTreino_AtividadeIteracoes0.equals((Object) null);
      planoTreino_AtividadeIteracoes0.setIteracoes((-821));
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.setAtividade(corrida1);
      planoTreino_AtividadeIteracoes1.toString();
      planoTreino0.toString();
      corrida1.equals(corrida0);
      planoTreino_AtividadeIteracoes0.getAtividade();
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      planoTreino_AtividadeIteracoes1.setAtividade(abdominais1);
      LocalDate localDate0 = MockLocalDate.now();
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      planoTreino0.clone();
      Object object0 = planoTreino_AtividadeIteracoes0.clone();
      corrida0.equals(object0);
      Object object1 = planoTreino_AtividadeIteracoes0.clone();
      planoTreino_AtividadeIteracoes1.equals(object1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockHijrahDate.now();
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getCodPlano();
      planoTreino0.getAtividades();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      ZoneOffset zoneOffset1 = ZoneOffset.UTC;
      zoneOffset0.compareTo(zoneOffset1);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1, 10.0, 10.0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(514, trail0);
      planoTreino_AtividadeIteracoes0.setAtividade(trail0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) localDate0);
      Btt btt0 = new Btt(localDateTime0, localTime0, 0, 176.82953766, 514);
      Btt btt1 = new Btt(btt0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) btt1);
      predicate1.or(predicate2);
      planoTreino_AtividadeIteracoes0.setIteracoes(1);
      planoTreino0.addAtividade(trail0, 70);
      planoTreino0.toString();
      planoTreino_AtividadeIteracoes0.getIteracoes();
      planoTreino0.getAtividades();
      planoTreino_AtividadeIteracoes0.clone();
      planoTreino_AtividadeIteracoes0.getAtividade();
      LocalDate localDate1 = planoTreino0.getDataRealizacao();
      planoTreino_AtividadeIteracoes0.clone();
      LocalDate localDate2 = planoTreino0.getDataRealizacao();
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.clone();
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate1, predicate0);
      planoTreino1.getAtividadesNumPeriodo(localDate2, localDate2);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1 bpm\nDistancia: 10.0 metros\nAltimetria: 10.0 metros\nTipo de atividade: Trail\nIteracoes: 70\n", "Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1 bpm\nDistancia: 10.0 metros\nAltimetria: 10.0 metros\nTipo de atividade: Trail\nIteracoes: 70\n", "Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1 bpm\nDistancia: 10.0 metros\nAltimetria: 10.0 metros\nTipo de atividade: Trail\nIteracoes: 70\n", 0, 1280, 1, localDate2, 'J');
      planoTreino1.caloriasDispendidas(utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockHijrahDate.now();
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getCodPlano();
      planoTreino0.getAtividades();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      ZoneOffset zoneOffset1 = ZoneOffset.UTC;
      zoneOffset0.compareTo(zoneOffset1);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1, 10.0, 10.0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(514, trail0);
      planoTreino_AtividadeIteracoes0.setAtividade(trail0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) localDate0);
      Btt btt0 = new Btt(localDateTime0, localTime0, 0, 176.82953766, 514);
      Btt btt1 = new Btt(btt0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) btt1);
      predicate1.or(predicate2);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino_AtividadeIteracoes0.setIteracoes(1);
      planoTreino0.addAtividade(trail0, 70);
      planoTreino0.toString();
      planoTreino_AtividadeIteracoes0.getIteracoes();
      planoTreino0.getAtividades();
      planoTreino_AtividadeIteracoes0.clone();
      planoTreino_AtividadeIteracoes0.getAtividade();
      LocalDate localDate1 = planoTreino0.getDataRealizacao();
      planoTreino_AtividadeIteracoes0.clone();
      LocalDate localDate2 = planoTreino0.getDataRealizacao();
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.clone();
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate1, predicate0);
      planoTreino1.getAtividadesNumPeriodo(localDate2, localDate2);
      planoTreino1.atividadesQueRespeitamP(localDate0, localDate2, predicate0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1 bpm\nDistancia: 10.0 metros\nAltimetria: 10.0 metros\nTipo de atividade: Trail\nIteracoes: 70\n", "", (String) null, (-4480), 49, 2008, localDate0, 'f');
      planoTreino1.caloriasDispendidas(utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino1.compareTo(planoTreino0);
      System.setCurrentTimeMillis(0);
      planoTreino1.toString();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      PlanoTreino planoTreino2 = new PlanoTreino(localDate0);
      Btt btt0 = new Btt();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      planoTreino2.caloriasDispendidas(utilizadorPraticanteOcasional0);
      planoTreino2.addAtividade(btt0, 0);
      planoTreino0.setProximoCodigo(0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      List<Atividade> list0 = utilizadorAmador0.getAtividadesIsoladas();
      planoTreino1.geraPlanoTreino(utilizadorPraticanteOcasional0, list0, 0, 0, 0.0, localDate0);
      btt0.clone();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino2.new AtividadeIteracoes(0, btt0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino1.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.equals(planoTreino0);
      planoTreino1.compareTo(planoTreino2);
      planoTreino2.compareTo(planoTreino1);
      Ciclismo ciclismo0 = new Ciclismo();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) ciclismo0);
      planoTreino2.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino1.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Trail trail0 = new Trail();
      trail0.getFatorVelocidade(0, 0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, trail0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      trail0.setAltimetria(1067.345);
      Atividade atividade0 = planoTreino_AtividadeIteracoes0.getAtividade();
      Abdominais abdominais0 = new Abdominais();
      Corrida corrida0 = new Corrida();
      abdominais0.equals(corrida0);
      planoTreino_AtividadeIteracoes0.equals(abdominais0);
      planoTreino_AtividadeIteracoes0.toString();
      planoTreino_AtividadeIteracoes0.equals(trail0);
      planoTreino0.addAtividade(atividade0, 0);
      Period period0 = Period.of(10, 1763, 0);
      IsoChronology isoChronology0 = period0.getChronology();
      trail0.toString();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(10);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      planoTreino_AtividadeIteracoes0.equals(trail0);
      ZoneOffset zoneOffset1 = ZoneOffset.MAX;
      LocalDate localDate1 = MockLocalDate.now((ZoneId) zoneOffset1);
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.planoTreinoNumPeriodo(localDate0, localDate1);
      planoTreino1.getAtividadesNumPeriodo(localDate1, localDate0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 1067.345 metros\nTipo de atividade: Trail\nIteracoes: 0\n", "", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 1067.345 metros\nTipo de atividade: Trail\nIteracoes: 0\n", 0, 78, 4475, localDate0, '*');
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "FX.D-]S7xHqY>F flq_", 7, 3757, 78, localDate0, 's');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      UnaryOperator<Atividade> unaryOperator0 = UnaryOperator.identity();
      List<Atividade> list0 = utilizadorAmador0.infoDasAtividadesNumPeriodoQueRespeitamP(localDate1, localDate0, predicate0, (Function<Atividade, Atividade>) unaryOperator0);
      // Undeclared exception!
      planoTreino0.geraPlanoTreino(utilizadorProfissional0, list0, 5, 1015, 0, localDate0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      LocalDate localDate0 = MockLocalDate.from(hijrahDate0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getCodPlano();
      planoTreino0.getAtividades();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      ZoneOffset zoneOffset1 = ZoneOffset.UTC;
      zoneOffset0.compareTo(zoneOffset1);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1, 10.0, 10.0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(514, trail0);
      planoTreino_AtividadeIteracoes0.setAtividade(trail0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) localDate0);
      planoTreino_AtividadeIteracoes0.clone();
      predicate0.or(predicate1);
      Predicate<Atividade> predicate2 = predicate0.or(predicate1);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino_AtividadeIteracoes0.setIteracoes(1);
      planoTreino0.addAtividade(trail0, 70);
      planoTreino0.toString();
      planoTreino_AtividadeIteracoes0.getIteracoes();
      planoTreino0.getAtividades();
      planoTreino_AtividadeIteracoes0.getAtividade();
      LocalDate localDate1 = planoTreino0.getDataRealizacao();
      planoTreino_AtividadeIteracoes0.clone();
      planoTreino0.toString();
      LocalDate localDate2 = planoTreino0.getDataRealizacao();
      planoTreino0.getAtividadesNumPeriodo(localDate2, localDate1);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      planoTreino0.caloriasDispendidas(utilizadorProfissional0);
      planoTreino0.atividadesQueRespeitamP(localDate2, localDate2, predicate2);
      planoTreino0.getAtividades();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(0);
      LocalDate localDate0 = MockLocalDate.now();
      LegPress legPress0 = new LegPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      List<Atividade> list0 = utilizadorAmador0.atividadesIsoladas(localDate0, localDate0, predicate0);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, 0, 0, 0, localDate0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = (PlanoTreino.AtividadeIteracoes)planoTreino_AtividadeIteracoes0.clone();
      planoTreino_AtividadeIteracoes1.setIteracoes((-37));
      planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes1);
      utilizadorAmador0.getAtividadesPlanoTreino();
      PlanoTreino planoTreino1 = utilizadorAmador0.getPlanoTreinoId(0);
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1, localDate0, localDate0);
      planoTreino0.compareTo(planoTreino2);
      planoTreino0.clone();
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Period period0 = Period.ofDays(1);
      period0.multipliedBy(1105);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("dd/MM/yyyy", "51s?8a,ESL{,:\u0003T!2", "51s?8a,ESL{,:\u0003T!2", (-18), 1, (-18), localDate0, '_');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId((-18));
      planoTreino0.setProximoCodigo((-18));
      planoTreino0.caloriasDispendidas(utilizadorAmador0);
      PlanoTreino planoTreino1 = new PlanoTreino(localDate0);
      planoTreino0.compareTo(planoTreino1);
      planoTreino1.clone();
      utilizadorAmador0.getAtividadesIsoladas();
      // Undeclared exception!
      try { 
        planoTreino0.addAtividade((Atividade) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Trail trail0 = new Trail();
      trail0.getFatorVelocidade(0, 0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, trail0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      trail0.setAltimetria(1067.345);
      Atividade atividade0 = planoTreino_AtividadeIteracoes0.getAtividade();
      Abdominais abdominais0 = new Abdominais();
      planoTreino_AtividadeIteracoes0.equals(abdominais0);
      planoTreino_AtividadeIteracoes0.toString();
      planoTreino0.addAtividade(atividade0, 0);
      Period period0 = Period.of(10, 1763, 0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(10);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      planoTreino_AtividadeIteracoes0.equals(trail0);
      ZoneOffset zoneOffset1 = ZoneOffset.MAX;
      LocalDate localDate1 = MockLocalDate.now((ZoneId) zoneOffset1);
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.planoTreinoNumPeriodo(localDate0, localDate1);
      BicepCurls bicepCurls0 = new BicepCurls();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) bicepCurls0);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate1, predicate0);
      Instant instant0 = MockInstant.now();
      Clock clock0 = MockClock.fixed(instant0, zoneOffset1);
      LocalDate localDate2 = MockLocalDate.now(clock0);
      planoTreino1.getAtividadesNumPeriodo(localDate0, localDate2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Trail trail0 = new Trail();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, trail0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      trail0.setAltimetria(1067.345);
      Atividade atividade0 = planoTreino_AtividadeIteracoes0.getAtividade();
      Abdominais abdominais0 = new Abdominais();
      Corrida corrida0 = new Corrida();
      abdominais0.equals(corrida0);
      planoTreino_AtividadeIteracoes0.equals(abdominais0);
      planoTreino_AtividadeIteracoes0.equals(trail0);
      planoTreino0.addAtividade(atividade0, 0);
      Period period0 = Period.of(10, 1763, 0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      planoTreino_AtividadeIteracoes0.equals(trail0);
      ZoneId zoneId0 = zoneOffset0.normalized();
      LocalDate localDate1 = MockLocalDate.now(zoneId0);
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      LocalDate localDate0 = MockLocalDate.from(hijrahDate0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getCodPlano();
      planoTreino0.getAtividades();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      ZoneOffset zoneOffset1 = ZoneOffset.UTC;
      zoneOffset0.compareTo(zoneOffset1);
      Trail trail0 = new Trail();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(514, trail0);
      planoTreino_AtividadeIteracoes0.setAtividade(trail0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) localDate0);
      Btt btt0 = new Btt(localDateTime0, localTime0, 0, 176.82953766, 514);
      Btt btt1 = new Btt(btt0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) btt1);
      predicate1.or(predicate2);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino_AtividadeIteracoes0.setIteracoes(1);
      planoTreino0.addAtividade(trail0, 70);
      planoTreino0.toString();
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      planoTreino_AtividadeIteracoes0.clone();
      planoTreino_AtividadeIteracoes0.getAtividade();
      LocalDate localDate1 = planoTreino0.getDataRealizacao();
      planoTreino_AtividadeIteracoes0.clone();
      planoTreino0.toString();
      planoTreino0.getDataRealizacao();
      planoTreino0.clone();
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate1, predicate0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      LocalDate localDate0 = MockLocalDate.from(hijrahDate0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getCodPlano();
      planoTreino0.getAtividades();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      ZoneOffset zoneOffset1 = ZoneOffset.UTC;
      zoneOffset0.compareTo(zoneOffset1);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1, 10.0, 10.0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(514, trail0);
      planoTreino_AtividadeIteracoes0.setAtividade(trail0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) localDate0);
      Btt btt0 = new Btt(localDateTime0, localTime0, 0, 176.82953766, 514);
      Btt btt1 = new Btt(btt0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) btt1);
      predicate1.or(predicate2);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino_AtividadeIteracoes0.setIteracoes(1);
      planoTreino0.addAtividade(trail0, 70);
      planoTreino0.toString();
      planoTreino_AtividadeIteracoes0.getIteracoes();
      planoTreino0.getAtividades();
      planoTreino_AtividadeIteracoes0.clone();
      planoTreino_AtividadeIteracoes0.getAtividade();
      LocalDate localDate1 = MockLocalDate.now();
      planoTreino_AtividadeIteracoes0.clone();
      planoTreino0.toString();
      planoTreino0.getDataRealizacao();
      planoTreino0.clone();
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate1, predicate0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Trail trail0 = new Trail();
      trail0.getFatorVelocidade(0, 0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, trail0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      trail0.setAltimetria(1067.345);
      Atividade atividade0 = planoTreino_AtividadeIteracoes0.getAtividade();
      Abdominais abdominais0 = new Abdominais();
      Corrida corrida0 = new Corrida();
      abdominais0.equals(corrida0);
      planoTreino_AtividadeIteracoes0.equals(abdominais0);
      planoTreino_AtividadeIteracoes0.toString();
      planoTreino_AtividadeIteracoes0.equals(trail0);
      planoTreino0.addAtividade(atividade0, 0);
      Period period0 = Period.of(10, 1763, 0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(10);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      planoTreino_AtividadeIteracoes0.equals(trail0);
      ZoneOffset zoneOffset1 = ZoneOffset.MAX;
      LocalDate localDate1 = MockLocalDate.now((ZoneId) zoneOffset1);
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Trail trail0 = new Trail();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, trail0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      trail0.setAltimetria(1067.345);
      Atividade atividade0 = planoTreino_AtividadeIteracoes0.getAtividade();
      Abdominais abdominais0 = new Abdominais();
      Corrida corrida0 = new Corrida();
      abdominais0.equals(corrida0);
      planoTreino_AtividadeIteracoes0.equals(abdominais0);
      planoTreino_AtividadeIteracoes0.equals(trail0);
      planoTreino0.addAtividade(atividade0, 0);
      Period period0 = Period.of(10, 1763, 0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(10);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      planoTreino_AtividadeIteracoes0.equals(trail0);
      ZoneId zoneId0 = zoneOffset0.normalized();
      LocalDate localDate1 = MockLocalDate.now(zoneId0);
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate1);
      Utilizador utilizador0 = null;
      // Undeclared exception!
      try { 
        planoTreino0.caloriasDispendidas((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Trail", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Period period0 = Period.ofDays(1);
      period0.multipliedBy(1105);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("dd/MM/yyyy", "51s?8a,ESL{,:\u0003T!2", "51s?8a,ESL{,:\u0003T!2", (-18), 1, (-18), localDate0, '_');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId((-18));
      planoTreino0.setProximoCodigo((-18));
      planoTreino0.caloriasDispendidas(utilizadorAmador0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.clone();
      planoTreino0.caloriasDispendidas(utilizadorPraticanteOcasional0);
      PlanoTreino planoTreino1 = new PlanoTreino(localDate0);
      planoTreino0.compareTo(planoTreino1);
      planoTreino1.compareTo(planoTreino0);
      planoTreino1.clone();
      LocalDate localDate1 = planoTreino1.getDataRealizacao();
      List<Atividade> list0 = utilizadorAmador0.getAtividadesIsoladas();
      System.setCurrentTimeMillis((-18));
      // Undeclared exception!
      planoTreino0.geraPlanoTreino(utilizadorPraticanteOcasional0, list0, 1, 1105, (-1351.1443892626635), localDate1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Period period0 = Period.ofDays(1);
      period0.multipliedBy(1105);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("dd/MM/yyyy", "51s?8a,ESL{,:\u0003T!2", "51s?8a,ESL{,:\u0003T!2", (-18), 1, (-18), localDate0, '_');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId((-18));
      planoTreino0.setProximoCodigo((-18));
      planoTreino0.caloriasDispendidas(utilizadorAmador0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.clone();
      planoTreino0.caloriasDispendidas(utilizadorPraticanteOcasional0);
      PlanoTreino planoTreino1 = new PlanoTreino(localDate0);
      planoTreino0.compareTo(planoTreino1);
      PlanoTreino planoTreino2 = (PlanoTreino)planoTreino1.clone();
      LocalDate localDate1 = planoTreino1.getDataRealizacao();
      List<Atividade> list0 = utilizadorAmador0.getAtividadesIsoladas();
      utilizadorPraticanteOcasional0.getAtividadesIsoladas();
      planoTreino2.getCodPlano();
      // Undeclared exception!
      planoTreino0.geraPlanoTreino(utilizadorPraticanteOcasional0, list0, 1, 1105, (-1351.1443892626635), localDate1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Trail trail0 = new Trail();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, trail0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      trail0.setAltimetria(1067.345);
      Atividade atividade0 = planoTreino_AtividadeIteracoes0.getAtividade();
      Abdominais abdominais0 = new Abdominais();
      planoTreino_AtividadeIteracoes0.equals(abdominais0);
      planoTreino_AtividadeIteracoes0.equals(trail0);
      planoTreino0.addAtividade(atividade0, 0);
      Period period0 = Period.of(10, 1763, 0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(10);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      planoTreino_AtividadeIteracoes0.equals(trail0);
      ZoneId zoneId0 = zoneOffset0.normalized();
      LocalDate localDate1 = MockLocalDate.now(zoneId0);
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      LocalDate localDate0 = MockLocalDate.from(hijrahDate0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getCodPlano();
      planoTreino0.getAtividades();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      ZoneOffset zoneOffset1 = ZoneOffset.UTC;
      zoneOffset0.compareTo(zoneOffset1);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1, 10.0, 10.0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(514, trail0);
      planoTreino_AtividadeIteracoes0.setAtividade(trail0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) localDate0);
      Btt btt0 = new Btt(localDateTime0, localTime0, 0, 176.82953766, 514);
      Btt btt1 = new Btt(btt0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) btt1);
      predicate1.or(predicate2);
      predicate0.or(predicate1);
      Predicate<Atividade> predicate3 = predicate0.or(predicate1);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino_AtividadeIteracoes0.setIteracoes(1);
      planoTreino0.addAtividade(trail0, 70);
      planoTreino0.toString();
      planoTreino_AtividadeIteracoes0.getIteracoes();
      planoTreino0.getAtividades();
      planoTreino_AtividadeIteracoes0.clone();
      planoTreino_AtividadeIteracoes0.getAtividade();
      LocalDate localDate1 = planoTreino0.getDataRealizacao();
      planoTreino_AtividadeIteracoes0.clone();
      planoTreino0.toString();
      planoTreino0.getDataRealizacao();
      planoTreino0.clone();
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate1, predicate3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(0);
      LocalDate localDate0 = MockLocalDate.now();
      LegPress legPress0 = new LegPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes1);
      List<Atividade> list0 = utilizadorAmador0.atividadesIsoladas(localDate0, localDate0, predicate0);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, 0, 0, 0.0, localDate0);
      planoTreino0.getCodPlano();
      planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes0);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, (-1), 0, 0.0, localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino();
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1, localDate0, localDate0);
      planoTreino0.compareTo(planoTreino2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Trail trail0 = new Trail();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, trail0);
      planoTreino_AtividadeIteracoes0.clone();
      trail0.setAltimetria(1067.345);
      Atividade atividade0 = planoTreino_AtividadeIteracoes0.getAtividade();
      MinguoDate minguoDate0 = MockMinguoDate.now();
      planoTreino_AtividadeIteracoes0.equals(minguoDate0);
      Abdominais abdominais0 = new Abdominais();
      atividade0.setFreqCardiaca((-1));
      planoTreino_AtividadeIteracoes0.equals(trail0);
      planoTreino0.addAtividade(atividade0, 0);
      Period period0 = Period.of(10, 1741, 10);
      Period period1 = period0.minusYears(0L);
      period1.getChronology();
      String string0 = "";
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino0.compareTo(planoTreino1);
      // Undeclared exception!
      try { 
        planoTreino0.getAtividadesNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(0);
      LocalDate localDate0 = MockLocalDate.now();
      LegPress legPress0 = new LegPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes1);
      List<Atividade> list0 = utilizadorAmador0.atividadesIsoladas(localDate0, localDate0, predicate0);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, 0, 0, 0.0, localDate0);
      planoTreino0.getCodPlano();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = (PlanoTreino.AtividadeIteracoes)planoTreino_AtividadeIteracoes1.clone();
      planoTreino_AtividadeIteracoes2.setIteracoes(28);
      planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes2);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, (-1), 0, 0.0, localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino();
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1, localDate0, localDate0);
      planoTreino0.compareTo(planoTreino2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(0);
      LocalDate localDate0 = MockLocalDate.now();
      LegPress legPress0 = new LegPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes1);
      List<Atividade> list0 = utilizadorAmador0.atividadesIsoladas(localDate0, localDate0, predicate0);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, 0, 0, 0.0, localDate0);
      planoTreino0.getCodPlano();
      Object object0 = planoTreino_AtividadeIteracoes1.clone();
      planoTreino_AtividadeIteracoes0.equals(object0);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, (-1), 0, 0.0, localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino();
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1, localDate0, localDate0);
      planoTreino0.compareTo(planoTreino2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Trail trail0 = new Trail();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, trail0);
      planoTreino_AtividadeIteracoes0.clone();
      trail0.setAltimetria(1067.345);
      Atividade atividade0 = planoTreino_AtividadeIteracoes0.getAtividade();
      Abdominais abdominais0 = new Abdominais();
      planoTreino_AtividadeIteracoes0.equals(abdominais0);
      planoTreino_AtividadeIteracoes0.equals(trail0);
      planoTreino0.addAtividade(atividade0, 0);
      Period period0 = Period.of(10, 1741, 10);
      Period period1 = period0.minusYears(0L);
      period1.getChronology();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        planoTreino0.caloriasDispendidas(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      planoTreino0.toString();
      LocalDate localDate1 = MockLocalDate.ofEpochDay(908L);
      planoTreino0.planoTreinoNumPeriodo(localDate1, localDate0);
      planoTreino1.getAtividades();
      UtilizadorProfissional utilizadorProfissional0 = null;
      try {
        utilizadorProfissional0 = new UtilizadorProfissional((UtilizadorProfissional) null, localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      int int0 = (-1831);
      int int1 = 3157;
      // Undeclared exception!
      try { 
        planoTreino0.planoTreinoNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      LocalDate localDate0 = MockLocalDate.from(hijrahDate0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getCodPlano();
      planoTreino0.getAtividades();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      ZoneOffset zoneOffset1 = ZoneOffset.UTC;
      zoneOffset0.compareTo(zoneOffset1);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1, 10.0, 10.0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(514, trail0);
      planoTreino_AtividadeIteracoes0.setAtividade(trail0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) localDate0);
      predicate0.or(predicate1);
      predicate0.or(predicate1);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino_AtividadeIteracoes0.setIteracoes(1);
      planoTreino0.addAtividade(trail0, 70);
      planoTreino0.toString();
      planoTreino_AtividadeIteracoes0.getIteracoes();
      planoTreino0.getAtividades();
      planoTreino_AtividadeIteracoes0.clone();
      planoTreino_AtividadeIteracoes0.getAtividade();
      planoTreino0.getDataRealizacao();
      planoTreino_AtividadeIteracoes0.clone();
      planoTreino0.toString();
      planoTreino0.getDataRealizacao();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      HijrahDate hijrahDate0 = MockHijrahDate.now((ZoneId) zoneOffset0);
      LocalDate localDate0 = MockLocalDate.from(hijrahDate0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", 0, 0, 990, localDate0, '(');
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0, localDate0, localDate0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", ">}", "\nPlanos de treino: \n", 0, 0, 0, localDate0, '(');
      Flexoes flexoes0 = new Flexoes();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) flexoes0);
      Function<Atividade, Atividade> function0 = Function.identity();
      List<Atividade> list0 = utilizadorAmador0.infoDasAtividadesNumPeriodoQueRespeitamP(localDate0, localDate0, predicate0, function0);
      // Undeclared exception!
      try { 
        planoTreino1.geraPlanoTreino(utilizadorPraticanteOcasional1, list0, 710, 990, 1778.43298, localDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.toString();
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino1.getAtividades();
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1);
      int int0 = (-640);
      LocalDate localDate0 = null;
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) "Plano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n");
      // Undeclared exception!
      try { 
        planoTreino2.atividadesQueRespeitamP((LocalDate) null, (LocalDate) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(2391, 309);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nAtividades e suas itera\u00E7oes: \n", "\nAtividades e suas itera\u00E7oes: \n", "\nAtividades e suas itera\u00E7oes: \n", 5, 2391, 2391, localDate0, 'X');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate0, localDate0);
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1);
      utilizadorAmador1.addPlanoTreino(planoTreino2);
      PlanoTreino planoTreino3 = utilizadorAmador1.getPlanoTreinoId((-1));
      Btt btt0 = new Btt();
      planoTreino3.getAtividadesNumPeriodo(localDate0, localDate0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino3.new AtividadeIteracoes(309, btt0);
      planoTreino_AtividadeIteracoes0.toString();
      planoTreino2.getAtividades();
      planoTreino1.setDataRealizacao(localDate0);
      planoTreino1.getAtividades();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress(legPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1804, legPress1);
      Utilizador utilizador0 = null;
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      planoTreino0.getAtividades();
      LocalDate localDate0 = null;
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino((Utilizador) null, linkedList0, 1804, 1804, 1804, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PlanoTreino planoTreino0 = null;
      try {
        planoTreino0 = new PlanoTreino((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getCodPlano();
      planoTreino0.getCodPlano();
      int int0 = (-852);
      int int1 = 1;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of((-852), 1, (-1), (-1), (-852), 1);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): -1
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino planoTreino1 = null;
      // Undeclared exception!
      try { 
        planoTreino0.compareTo((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      Duration duration0 = Duration.ofMinutes(0);
      Clock clock1 = MockClock.offset(clock0, duration0);
      LocalDate localDate0 = MockLocalDate.now(clock1);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      LocalDate localDate1 = planoTreino0.getDataRealizacao();
      LocalTime localTime0 = MockLocalTime.now(clock1);
      Flexoes flexoes0 = new Flexoes((LocalDateTime) null, localTime0, 102, 313);
      Flexoes flexoes1 = new Flexoes(flexoes0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(313, flexoes1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.setIteracoes(72);
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate1);
      planoTreino_AtividadeIteracoes1.clone();
      planoTreino_AtividadeIteracoes0.setIteracoes(102);
      // Undeclared exception!
      try { 
        planoTreino_AtividadeIteracoes0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Ciclismo ciclismo0 = new Ciclismo();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Atividade atividade0 = ciclismo0.geraAtividade(utilizadorProfissional0, 0.1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, atividade0);
      planoTreino_AtividadeIteracoes0.getAtividade();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino0);
      List<Atividade> list0 = planoTreino1.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      int int0 = (-161);
      planoTreino0.geraPlanoTreino((Utilizador) null, list0, (-161), (-3923), (-161), localDate0);
      planoTreino1.getAtividadesNumPeriodo(localDate0, localDate0);
      int int1 = 2088;
      planoTreino0.setDataRealizacao(localDate0);
      planoTreino0.setProximoCodigo(0);
      planoTreino1.planoTreinoNumPeriodo(localDate0, localDate0);
      planoTreino0.setProximoCodigo(2088);
      planoTreino1.caloriasDispendidas((Utilizador) null);
      planoTreino0.setProximoCodigo(2088);
      PlanoTreino planoTreino2 = new PlanoTreino(localDate0);
      int int2 = (-537);
      // Undeclared exception!
      try { 
        MockLocalDateTime.from(localDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalDateTime from TemporalAccessor: 2014-02-14 of type java.time.LocalDate
         //
         verifyException("java.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nAtividades e suas itera\u00E7oes: \n", "\nAtividades e suas itera\u00E7oes: \n", "\nAtividades e suas itera\u00E7oes: \n", 4517, 0, 4517, (LocalDate) null, '9');
      planoTreino0.caloriasDispendidas(utilizadorPraticanteOcasional0);
      planoTreino0.toString();
      planoTreino0.getDataRealizacao();
      planoTreino0.getAtividades();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(0);
      LocalDate localDate0 = MockLocalDate.now();
      LegPress legPress0 = new LegPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes1);
      List<Atividade> list0 = utilizadorAmador0.atividadesIsoladas(localDate0, localDate0, predicate0);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, 0, 0, 0.0, localDate0);
      planoTreino0.getCodPlano();
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, (-1), 0, 0.0, localDate0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Ciclismo ciclismo0 = new Ciclismo();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Atividade atividade0 = ciclismo0.geraAtividade(utilizadorAmador0, 6.0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, atividade0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.setIteracoes(0);
      LocalDate localDate0 = planoTreino0.getDataRealizacao();
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      // Undeclared exception!
      planoTreino0.geraPlanoTreino(utilizadorAmador0, linkedList0, 0, 5, 0, localDate0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      int int0 = 0;
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(0);
      LocalDate localDate0 = null;
      PlanoTreino planoTreino1 = null;
      try {
        planoTreino1 = new PlanoTreino(planoTreino0, (LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(6);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(6);
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino();
      planoTreino0.compareTo(planoTreino1);
      planoTreino1.compareTo(planoTreino0);
      planoTreino0.setDataRealizacao(localDate0);
      Abdominais abdominais0 = new Abdominais();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino1.new AtividadeIteracoes(0, abdominais0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino1.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.getIteracoes();
      planoTreino1.compareTo(planoTreino0);
      planoTreino_AtividadeIteracoes1.setIteracoes(0);
      Trail trail0 = null;
      try {
        trail0 = new Trail((Trail) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino planoTreino1 = new PlanoTreino();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      LocalDate localDate0 = MockLocalDate.from(offsetDateTime0);
      planoTreino0.setDataRealizacao(localDate0);
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay((-16), (-16));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): -16
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.getAtividades();
      PlanoTreino planoTreino1 = new PlanoTreino();
      planoTreino0.compareTo(planoTreino1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      String string0 = "+cAk^ViWx5k";
      int int0 = 284;
      int int1 = 1417;
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("+cAk^ViWx5k", "\nData e hora: ", "dd/MM/yyyy", 284, 284, 1417, localDate0, '8');
      List<Atividade> list0 = null;
      int int2 = 0;
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorPraticanteOcasional0, (List<Atividade>) null, 284, 0, 0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.clone();
      Month month0 = Month.MAY;
      planoTreino0.getAtividades();
      // Undeclared exception!
      try { 
        MockLocalDate.of((-1430), month0, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1;
      LocalDate localDate0 = MockLocalDate.ofYearDay(1, 1);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate0, localDate0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(1, 1, 1, 0, 77, (-161), 77);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MinuteOfHour (valid values 0 - 59): 77
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalDate localDate0 = null;
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      PlanoTreino planoTreino1 = null;
      try {
        planoTreino1 = new PlanoTreino(planoTreino0, (LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      long long0 = 1L;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      PlanoTreino planoTreino0 = null;
      try {
        planoTreino0 = new PlanoTreino((PlanoTreino) null, localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.getAtividades();
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress(legPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1312, legPress1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1312);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "e", 3536, 1312, (-687), localDate0, '^');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      UtilizadorAmador utilizadorAmador2 = new UtilizadorAmador(utilizadorAmador1, localDate0, localDate0);
      PlanoTreino planoTreino1 = utilizadorAmador2.getPlanoTreinoId(0);
      planoTreino_AtividadeIteracoes1.equals(planoTreino1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0, localDate0, localDate0);
      UtilizadorAmador utilizadorAmador2 = new UtilizadorAmador(utilizadorAmador1);
      PlanoTreino planoTreino0 = utilizadorAmador2.getPlanoTreinoId((-1));
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino1.setProximoCodigo((-1));
      Flexoes flexoes0 = new Flexoes();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino1.new AtividadeIteracoes((-1), flexoes0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino1.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.setIteracoes((-1));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      Atividade atividade0 = null;
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino1.new AtividadeIteracoes((-2902), (Atividade) null);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = null;
      try {
        planoTreino_AtividadeIteracoes1 = planoTreino1.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.PlanoTreino$AtividadeIteracoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Corrida corrida0 = new Corrida();
      planoTreino0.addAtividade(corrida0, 3424);
      planoTreino0.setProximoCodigo(5);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      LocalDate localDate0 = MockLocalDate.from(offsetDateTime0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      BicepCurls bicepCurls0 = new BicepCurls();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((-1), bicepCurls0);
      planoTreino_AtividadeIteracoes0.setAtividade(bicepCurls0);
      bicepCurls0.setProximoCodigo((-1));
      planoTreino0.clone();
      planoTreino_AtividadeIteracoes0.toString();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.now();
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorProfissional1, (List<Atividade>) null, 0, 1430, 0.0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(10);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino1.toString();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.getCodPlano();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(5, 5, 5);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.clone();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "ep=1zq8", "ep=1zq8", 2049, 2049, 10, localDate0, 'y');
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.equals(utilizadorProfissional0);
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      utilizadorAmador1.getBMR();
      UtilizadorAmador utilizadorAmador2 = new UtilizadorAmador(utilizadorAmador1, localDate0, localDate0);
      utilizadorAmador2.setProximoCodigo(10);
      BicepCurls bicepCurls0 = new BicepCurls();
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorAmador1, 17.4357586875088);
      utilizadorAmador2.addAtividade(atividade0);
      List<Atividade> list0 = utilizadorAmador2.getAtividadesIsoladas();
      planoTreino1.geraPlanoTreino(utilizadorProfissional0, list0, 10, 10, 10, localDate0);
      planoTreino0.toString();
      planoTreino0.compareTo(planoTreino1);
      planoTreino1.getCodPlano();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) list0);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(6);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(6);
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino();
      planoTreino0.compareTo(planoTreino1);
      planoTreino1.compareTo(planoTreino0);
      planoTreino0.setDataRealizacao(localDate0);
      planoTreino1.compareTo(planoTreino0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((-1704), corrida1);
      planoTreino_AtividadeIteracoes0.equals((Object) null);
      planoTreino_AtividadeIteracoes0.setIteracoes((-1704));
      planoTreino_AtividadeIteracoes0.toString();
      planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes0.toString();
      planoTreino_AtividadeIteracoes0.getAtividade();
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      planoTreino_AtividadeIteracoes0.setAtividade(abdominais1);
      LocalDate localDate0 = MockLocalDate.now();
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Trail trail0 = new Trail();
      trail0.getFatorVelocidade(0, 0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, trail0);
      trail0.setAltimetria(1067.345);
      Atividade atividade0 = planoTreino_AtividadeIteracoes0.getAtividade();
      Abdominais abdominais0 = new Abdominais();
      Corrida corrida0 = new Corrida();
      abdominais0.equals(corrida0);
      planoTreino_AtividadeIteracoes0.equals(abdominais0);
      planoTreino_AtividadeIteracoes0.toString();
      planoTreino_AtividadeIteracoes0.equals(trail0);
      planoTreino0.addAtividade(atividade0, 0);
      Period period0 = Period.of(10, 1763, 0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(10);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      planoTreino_AtividadeIteracoes0.equals(trail0);
      ZoneOffset zoneOffset1 = ZoneOffset.MAX;
      LocalDate localDate1 = MockLocalDate.now((ZoneId) zoneOffset1);
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate1);
      planoTreino0.planoTreinoNumPeriodo(localDate1, localDate1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      int int0 = 0;
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(0);
      MockLocalDate.now();
      LegPress legPress0 = new LegPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      planoTreino_AtividadeIteracoes0.getAtividade();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      Predicate.isEqual((Object) planoTreino_AtividadeIteracoes1);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      linkedList0.pollFirst();
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(0, (-1), 5, 39, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -1
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(0);
      LocalDate localDate0 = MockLocalDate.now();
      LegPress legPress0 = new LegPress();
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino0.compareTo(planoTreino1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino0.getCodPlano();
      Object object0 = planoTreino_AtividadeIteracoes1.clone();
      planoTreino_AtividadeIteracoes0.equals(object0);
      PlanoTreino planoTreino2 = new PlanoTreino();
      PlanoTreino planoTreino3 = new PlanoTreino(planoTreino2, localDate0, localDate0);
      planoTreino0.compareTo(planoTreino3);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(10);
      LegPress legPress0 = new LegPress();
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(10, legPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      Predicate.isEqual((Object) planoTreino_AtividadeIteracoes1);
      planoTreino0.getCodPlano();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = (PlanoTreino.AtividadeIteracoes)planoTreino_AtividadeIteracoes1.clone();
      planoTreino_AtividadeIteracoes2.setIteracoes(9);
      planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes2);
      PlanoTreino planoTreino2 = new PlanoTreino();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      utilizadorProfissional0.allAtividades(localDate0, localDate0);
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.setDataRealizacao(localDate0);
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      planoTreino0.addAtividade(abdominais1, 5);
      planoTreino0.toString();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) abdominais0);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Trail trail0 = new Trail();
      Corrida corrida0 = new Corrida();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(10);
      zoneOffset0.normalized();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Period period0 = Period.ofDays(1);
      period0.multipliedBy(1105);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("dd/MM/yyyy", "51s?8a,ESL{,:\u0003T!2", "51s?8a,ESL{,:\u0003T!2", (-18), 1, (-18), localDate0, '_');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId((-18));
      planoTreino0.setProximoCodigo((-18));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.clone();
      planoTreino0.caloriasDispendidas(utilizadorPraticanteOcasional0);
      PlanoTreino planoTreino1 = new PlanoTreino(localDate0);
      planoTreino0.compareTo(planoTreino1);
      planoTreino1.clone();
      LocalDate localDate1 = planoTreino1.getDataRealizacao();
      List<Atividade> list0 = utilizadorAmador0.getAtividadesIsoladas();
      // Undeclared exception!
      planoTreino0.geraPlanoTreino(utilizadorPraticanteOcasional0, list0, 1, 1105, (-1351.1443892626635), localDate1);
  }
}
