/*
 * This file was automatically generated by EvoSuite
 * Tue May 27 00:44:16 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.BenchPress;
import com.mycompany.solucao1.BicepCurls;
import com.mycompany.solucao1.Btt;
import com.mycompany.solucao1.Corrida;
import com.mycompany.solucao1.PlanoTreino;
import com.mycompany.solucao1.Utilizador;
import com.mycompany.solucao1.UtilizadorAmador;
import com.mycompany.solucao1.UtilizadorPraticanteOcasional;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.nio.CharBuffer;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.time.format.TextStyle;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Btt_ESTest extends Btt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = (-1L);
      System.setCurrentTimeMillis((-1L));
      Btt btt0 = new Btt();
      int int0 = (-2021);
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      btt0.clone();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("U*ktY|EeB1@C%st$U5", "U*ktY|EeB1@C%st$U5", "", (-2021), (-2021), (-2021), localDate0, 'Y');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.toString();
      planoTreino0.addAtividade(btt0, 1431591114);
      planoTreino0.setDataRealizacao(localDate0);
      utilizadorAmador1.addPlanoTreino(planoTreino0);
      double double0 = 86400.0;
      // Undeclared exception!
      btt0.geraAtividade(utilizadorAmador1, 86400.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      LocalTime localTime0 = MockLocalTime.of(2, 2, 2, 2);
      Btt btt0 = new Btt(localDateTime0, localTime0, 2145241034, 0.1, 1000.0);
      Btt btt1 = new Btt(btt0);
      double double0 = btt1.getFatorHard();
      assertEquals(1.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Btt btt0 = new Btt();
      assertEquals(1.05, btt0.getFatorHard(), 0.01);
      
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorPraticanteOcasional0.addAtividade(bicepCurls0);
      Btt btt1 = new Btt(btt0);
      utilizadorPraticanteOcasional0.addAtividadePlanoTreino(1, btt1, 70);
      // Undeclared exception!
      try { 
        btt0.geraAtividade(utilizadorPraticanteOcasional0, 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.mycompany.solucao1.BicepCurls cannot be cast to com.mycompany.solucao1.Btt
         //
         verifyException("com.mycompany.solucao1.Btt", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Btt btt0 = new Btt();
      boolean boolean0 = btt0.equals(btt0);
      assertTrue(boolean0);
      
      btt0.toString();
      btt0.setProximoCodigo(0);
      Period period0 = Period.ofMonths((-885));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(2053L);
      btt0.setTempo(localTime0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n", (String) null, "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n", (-170), (-170), 1, localDate0, '2');
      utilizadorPraticanteOcasional0.setNome("f1");
      Btt btt1 = new Btt(btt0);
      utilizadorPraticanteOcasional0.getAtividadesPlanoTreino();
      period0.toTotalMonths();
      btt0.getFatorHard();
      btt1.getFatorHard();
      btt0.toString();
      period0.negated();
      btt0.geraAtividade(utilizadorPraticanteOcasional0, (-1635.7332966881));
      Btt btt2 = (Btt)btt0.geraAtividade(utilizadorPraticanteOcasional0, (-1635.7332966881));
      assertEquals(70087.5, btt2.getDistancia(), 0.01);
      assertEquals(1.05, btt2.getFatorHard(), 0.01);
      assertEquals(0, btt2.getFreqCardiaca());
      assertEquals(0.0, btt2.getAltimetria(), 0.01);
      
      Btt btt3 = (Btt)btt0.clone();
      String string0 = btt0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:34:13\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n", string0);
      
      btt0.getFatorHard();
      btt0.equals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n");
      boolean boolean1 = btt0.equals("f1");
      assertNotSame(btt0, btt3);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(923L);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Btt btt0 = new Btt(localDateTime0, localTime0, (-3379), 404.706129869605, 2001.8961524771587);
      btt0.getVelocidade();
      System.setCurrentTimeMillis(923L);
      System.setCurrentTimeMillis((-3379));
      System.setCurrentTimeMillis(2827L);
      btt0.clone();
      btt0.getFatorHard();
      btt0.toString();
      Object object0 = btt0.clone();
      double double0 = btt0.getFatorHard();
      assertEquals(1.2500000000000002, double0, 0.01);
      
      String string0 = btt0.toString();
      assertNotSame(btt0, object0);
      assertEquals("Atividade\nId: 1\nData e hora: 01/01/1970 00:15:23\nDura\u00E7ao: 00:15:23\nFrequencia Cardiaca: -3379 bpm\nDistancia: 404.706129869605 metros\nAltimetria: 2001.8961524771587 metros\nTipo de atividade: BTT\n", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = null;
      long long0 = 1L;
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1L);
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 1, 1, (-1253.499950161115));
      btt0.getFatorVelocidade(1, 1);
      btt0.setAltimetria((-1253.499950161115));
      Btt btt1 = new Btt(btt0);
      // Undeclared exception!
      try { 
        btt0.equals(btt1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(923L);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Btt btt0 = new Btt(localDateTime0, localTime0, (-3379), 404.706129869605, 2000.0);
      btt0.getVelocidade();
      btt0.getFatorHard();
      System.setCurrentTimeMillis(923L);
      System.setCurrentTimeMillis((-3379));
      System.setCurrentTimeMillis(2827L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorAmador1, 2827L);
      assertEquals(0.0, btt1.getAltimetria(), 0.01);
      assertEquals(2.25485782935E10, btt1.getDistancia(), 0.01);
      
      btt0.clone();
      btt0.getFatorHard();
      btt0.toString();
      Btt btt2 = (Btt)btt0.clone();
      double double0 = btt0.getFatorHard();
      assertEquals(1.1500000000000001, double0, 0.01);
      
      Btt btt3 = (Btt)btt0.geraAtividade(utilizadorAmador0, 0L);
      assertEquals(1.05, btt3.getFatorHard(), 0.01);
      
      String string0 = btt0.toString();
      assertNotSame(btt0, btt2);
      assertEquals("Atividade\nId: 1\nData e hora: 01/01/1970 00:15:23\nDura\u00E7ao: 00:15:23\nFrequencia Cardiaca: -3379 bpm\nDistancia: 404.706129869605 metros\nAltimetria: 2000.0 metros\nTipo de atividade: BTT\n", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Btt btt0 = new Btt(localDateTime0, localTime0, (-1), (-1), 0);
      btt0.getFatorHard();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = btt0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: -1 bpm\nDistancia: -1.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n", string0);
      
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, "TmT2k4", "TmT2k4", 938, (-1), 0, localDate0, '%');
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      UtilizadorProfissional utilizadorProfissional2 = new UtilizadorProfissional(utilizadorProfissional1, localDate0, localDate0);
      double double0 = btt0.consumoCalorias(utilizadorProfissional2);
      assertEquals(33454.621381076395, double0, 0.01);
      
      boolean boolean0 = btt0.equals(localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Btt btt0 = new Btt((LocalDateTime) null, (LocalTime) null, 0, 1308.1257525, 1314.983980202);
      Clock clock0 = MockClock.systemUTC();
      MockLocalDate.now(clock0);
      btt0.clone();
      btt0.setDataRealizacao((LocalDateTime) null);
      PlanoTreino planoTreino0 = new PlanoTreino();
      btt0.clone();
      btt0.getFatorHard();
      double double0 = btt0.getFatorHard();
      assertEquals(1.1500000000000001, double0, 0.01);
      
      Object object0 = btt0.clone();
      assertNotSame(object0, btt0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Btt btt0 = new Btt();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", (-1538), 1562, (-1538), localDate0, '-');
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorPraticanteOcasional0, (-1538));
      assertEquals((-18574.5), btt1.getDistancia(), 0.01);
      
      utilizadorPraticanteOcasional0.setNome("");
      utilizadorPraticanteOcasional0.setAltura(1);
      btt0.clone();
      btt0.clone();
      btt0.toString();
      btt0.clone();
      Btt btt2 = (Btt)btt0.geraAtividade(utilizadorPraticanteOcasional0, 1562);
      assertEquals(0, btt2.getFreqCardiaca());
      assertEquals(1.05, btt2.getFatorHard(), 0.01);
      assertEquals(0.0, btt2.getAltimetria(), 0.01);
      
      btt0.getFatorHard();
      boolean boolean0 = btt0.equals(btt0);
      assertTrue(boolean0);
      
      String string0 = btt0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(4, 4, 4);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Btt btt0 = new Btt(localDateTime0, localTime0, 4, 4, 4);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      char[] charArray0 = new char[0];
      btt0.consumoCalorias(utilizadorAmador0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 6, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Btt btt0 = new Btt(localDateTime0, localTime0, (-1), (-1), 0);
      btt0.getFatorHard();
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      zoneOffset0.getDisplayName(textStyle0, locale0);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, "TmT2k4", "TmT2k4", 938, 1, 0, localDate0, '%');
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      UtilizadorProfissional utilizadorProfissional2 = new UtilizadorProfissional(utilizadorProfissional1, localDate0, localDate0);
      double double0 = btt0.consumoCalorias(utilizadorProfissional2);
      assertEquals((-33454.621381076395), double0, 0.01);
      
      boolean boolean0 = btt0.equals(localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = new Btt(btt0);
      btt0.clone();
      String string0 = "zKkasEbs\"H;9|b4(|";
      // Undeclared exception!
      try { 
        btt1.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Btt", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 70, 0.0, 0.0);
      // Undeclared exception!
      try { 
        btt0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Btt btt0 = null;
      Btt btt1 = null;
      try {
        btt1 = new Btt((Btt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setProximoCodigo((-232));
      btt0.toString();
      btt0.toString();
      btt0.toString();
      int int0 = (-2113);
      LocalDate localDate0 = MockLocalDate.now();
      btt0.getFatorVelocidade(0.0, 58);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "&k$a", "=D4A", (-232), 58, (-2113), localDate0, '\'');
      utilizadorProfissional0.numeroAtividades(localDate0, localDate0);
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      UtilizadorProfissional utilizadorProfissional2 = new UtilizadorProfissional(utilizadorProfissional1, localDate0, localDate0);
      btt0.geraAtividade(utilizadorProfissional2, (-232));
      btt0.clone();
      utilizadorProfissional1.setMorada("&k$a");
      btt0.equals("=D4A");
      btt0.geraAtividade(utilizadorProfissional2, 58);
      btt0.toString();
      btt0.equals((Object) null);
      // Undeclared exception!
      try { 
        btt0.consumoCalorias(utilizadorProfissional2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = new Btt(btt0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setPeso(5.0E-4);
      btt1.geraAtividade(utilizadorProfissional1, (-1370.79001224689));
      // Undeclared exception!
      try { 
        btt0.consumoCalorias(utilizadorProfissional1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Btt btt0 = new Btt();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0);
      utilizadorPraticanteOcasional1.equals(btt0);
      utilizadorPraticanteOcasional1.setGenero('g');
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorPraticanteOcasional1, 86400.0);
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals(0.0, btt1.getFatorAltimetria(), 0.01);
      assertEquals(2.25485782935E10, btt1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Btt btt0 = new Btt(localDateTime0, localTime0, 0, (-730.03729229353), (-903.6596734490843));
      btt0.getFatorHard();
      btt0.equals(localTime0);
      btt0.clone();
      btt0.toString();
      btt0.equals(localDateTime0);
      Object object0 = btt0.clone();
      btt0.equals(object0);
      BenchPress benchPress0 = new BenchPress();
      BenchPress benchPress1 = new BenchPress(benchPress0);
      assertEquals(0, benchPress1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Btt btt0 = new Btt();
      Utilizador utilizador0 = null;
      int int0 = (-685);
      btt0.setProximoCodigo((-109));
      btt0.setFreqCardiaca((-685));
      btt0.toString();
      // Undeclared exception!
      try { 
        btt0.geraAtividade((Utilizador) null, 1741.63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Btt", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Btt btt0 = new Btt();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0, localDate0, localDate0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional2 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional1);
      // Undeclared exception!
      try { 
        btt0.consumoCalorias(utilizadorPraticanteOcasional2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = new Btt(btt0);
      String string0 = btt1.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Btt btt0 = new Btt();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        btt0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = new Btt(btt0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      Btt btt2 = (Btt)btt1.geraAtividade(utilizadorAmador1, 1095.592917385);
      boolean boolean0 = btt1.equals(utilizadorAmador0);
      assertFalse(boolean0);
      
      boolean boolean1 = btt1.equals(btt2);
      assertEquals(2.25485782935E10, btt2.getDistancia(), 0.01);
      assertFalse(boolean1);
      
      btt1.geraAtividade(utilizadorAmador1, 0.0);
      Btt btt3 = (Btt)btt1.geraAtividade(utilizadorAmador1, (-208.476861));
      assertEquals((-2.2548578304E10), btt3.getDistancia(), 0.01);
      assertEquals(0.0, btt3.getFatorAltimetria(), 0.01);
      
      Btt btt4 = (Btt)btt0.clone();
      Btt btt5 = (Btt)btt0.geraAtividade(utilizadorAmador0, 0.0);
      assertNotSame(btt0, btt4);
      assertTrue(btt5.equals((Object)btt1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Btt btt0 = new Btt();
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida(corrida0);
      boolean boolean0 = btt0.equals(corrida1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Btt btt0 = new Btt();
      Object object0 = btt0.clone();
      assertNotSame(object0, btt0);
      
      boolean boolean0 = btt0.equals(object0);
      assertTrue(boolean0);
      
      boolean boolean1 = object0.equals("86");
      assertNotSame(object0, btt0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Btt btt0 = new Btt(localDateTime0, (LocalTime) null, 2, 20L, 1000.2);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = btt0.getFatorHard();
      assertEquals(1.1500000000000001, double0, 0.01);
      
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorAmador0, 2);
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals(1.05, btt1.getFatorHard(), 0.01);
      assertEquals(2.25485782935E10, btt1.getDistancia(), 0.01);
      assertEquals(0.0, btt1.getFatorAltimetria(), 0.01);
      
      String string0 = btt0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: null\nFrequencia Cardiaca: 2 bpm\nDistancia: 20.0 metros\nAltimetria: 1000.2 metros\nTipo de atividade: BTT\n", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Btt btt0 = new Btt(localDateTime0, localTime0, 1169, 1169, 2001.9997290755698);
      double double0 = btt0.getFatorHard();
      assertEquals(1.2500000000000002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Btt btt0 = new Btt();
      boolean boolean0 = btt0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(18, 18, 18, 18);
      Btt btt0 = new Btt(localDateTime0, localTime0, 18, 18, 18);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = btt0.consumoCalorias(utilizadorProfissional0);
      assertEquals(1.05, btt0.getFatorHard(), 0.01);
      assertEquals(-0.0, double0, 0.01);
  }
}
