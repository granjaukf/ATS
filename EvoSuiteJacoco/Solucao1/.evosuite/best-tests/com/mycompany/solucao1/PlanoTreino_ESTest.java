/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 19:36:29 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.Abdominais;
import com.mycompany.solucao1.Atividade;
import com.mycompany.solucao1.BenchPress;
import com.mycompany.solucao1.BicepCurls;
import com.mycompany.solucao1.Btt;
import com.mycompany.solucao1.Ciclismo;
import com.mycompany.solucao1.Corrida;
import com.mycompany.solucao1.LegPress;
import com.mycompany.solucao1.PlanoTreino;
import com.mycompany.solucao1.Trail;
import com.mycompany.solucao1.Utilizador;
import com.mycompany.solucao1.UtilizadorAmador;
import com.mycompany.solucao1.UtilizadorPraticanteOcasional;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.time.Clock;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.time.chrono.MinguoDate;
import java.time.format.DateTimeParseException;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class PlanoTreino_ESTest extends PlanoTreino_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(449L);
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino1.getAtividades();
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1, localDate0, localDate0);
      Utilizador utilizador0 = null;
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes((-1), (-1));
      zoneOffset0.normalized();
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Trail trail0 = new Trail(localDateTime0, localTime0, (-1), 449L, (-125.17937218622));
      linkedList0.add((Atividade) trail0);
      Clock clock0 = MockClock.systemUTC();
      Duration duration0 = Duration.ofMillis(449L);
      Clock clock1 = MockClock.offset(clock0, duration0);
      LocalTime localTime1 = MockLocalTime.now(clock1);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime1, 1992, (-1096.9271));
      Ciclismo ciclismo1 = new Ciclismo(ciclismo0);
      linkedList0.add((Atividade) ciclismo1);
      int int0 = 21;
      // Undeclared exception!
      try { 
        planoTreino1.geraPlanoTreino((Utilizador) null, linkedList0, 21, 21, 10.0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Ciclismo", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(449L);
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino1.getAtividades();
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1, localDate0, localDate0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes((-1), (-1));
      zoneOffset0.normalized();
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Trail trail0 = new Trail(localDateTime0, localTime0, (-1), 449L, (-125.17937218622));
      linkedList0.add((Atividade) trail0);
      Clock clock0 = MockClock.systemUTC();
      Duration duration0 = Duration.ofMillis(449L);
      Clock clock1 = MockClock.offset(clock0, duration0);
      LocalTime localTime1 = MockLocalTime.now(clock1);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime1, 1992, (-1096.9271));
      Ciclismo ciclismo1 = new Ciclismo(localDateTime0, localTime0, (-1), (-1));
      linkedList0.add((Atividade) ciclismo1);
      linkedList0.add((Atividade) trail0);
      // Undeclared exception!
      try { 
        planoTreino1.geraPlanoTreino((Utilizador) null, linkedList0, 21, 21, 10.0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Ciclismo", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(449L);
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino1.getAtividades();
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1, localDate0, localDate0);
      planoTreino2.planoTreinoNumPeriodo(localDate0, localDate0);
      Utilizador utilizador0 = null;
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes((-1), (-1));
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Trail trail0 = new Trail(localDateTime0, localTime0, 10, 449L, (-125.17937218622));
      linkedList0.add((Atividade) trail0);
      int int0 = (-803);
      planoTreino1.geraPlanoTreino((Utilizador) null, linkedList0, (-803), (-803), 2.2, localDate0);
      // Undeclared exception!
      planoTreino2.geraPlanoTreino((Utilizador) null, linkedList0, (-1), 10, 757.8997399, localDate0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(7, (Atividade) null);
      planoTreino_AtividadeIteracoes0.toString();
      // Undeclared exception!
      try { 
        MockLocalDate.parse((CharSequence) "nullIteracoes: 7\n");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'nullIteracoes: 7
         // ' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Trail trail0 = new Trail();
      trail0.getFatorVelocidade(0, 0);
      trail0.setAltimetria(1067.345);
      Abdominais abdominais0 = new Abdominais();
      planoTreino0.addAtividade(trail0, 0);
      Period period0 = Period.of(10, 0, 0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(10);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      ZoneOffset zoneOffset1 = ZoneOffset.MAX;
      LocalDate localDate1 = MockLocalDate.now((ZoneId) zoneOffset1);
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.planoTreinoNumPeriodo(localDate0, localDate1);
      Instant instant0 = MockInstant.now();
      Clock clock0 = MockClock.fixed(instant0, zoneOffset1);
      LocalDate localDate2 = MockLocalDate.now(clock0);
      planoTreino1.getAtividadesNumPeriodo(localDate0, localDate2);
      planoTreino0.getAtividadesNumPeriodo(localDate2, localDate0);
      planoTreino0.clone();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(10);
      LegPress legPress0 = new LegPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(10, legPress0);
      Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      planoTreino0.getCodPlano();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.setIteracoes(9);
      planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.compareTo(planoTreino0);
      System.setCurrentTimeMillis(0);
      planoTreino0.toString();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      PlanoTreino planoTreino1 = new PlanoTreino(localDate0);
      Btt btt0 = new Btt();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      planoTreino1.addAtividade(btt0, 0);
      planoTreino0.setProximoCodigo(0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      List<Atividade> list0 = utilizadorAmador0.getAtividadesIsoladas();
      planoTreino0.geraPlanoTreino(utilizadorPraticanteOcasional0, list0, 0, 0, 0, localDate0);
      planoTreino0.compareTo(planoTreino1);
      planoTreino1.compareTo(planoTreino0);
      planoTreino1.planoTreinoNumPeriodo(localDate0, localDate0);
      LocalDate localDate1 = MockLocalDate.ofEpochDay(44);
      planoTreino1.getAtividadesNumPeriodo(localDate1, localDate1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Corrida corrida0 = new Corrida();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((-1704), corrida0);
      planoTreino_AtividadeIteracoes0.equals((Object) null);
      planoTreino_AtividadeIteracoes0.setIteracoes((-1704));
      planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Period period0 = Period.ofDays(1);
      period0.multipliedBy(1105);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("dd/MM/yyyy", "51s?8a,ESL{,:\u0003T!2", "51s?8a,ESL{,:\u0003T!2", (-18), 1, (-18), localDate0, '_');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId((-18));
      planoTreino0.setProximoCodigo((-18));
      planoTreino0.caloriasDispendidas(utilizadorAmador0);
      PlanoTreino planoTreino1 = new PlanoTreino(localDate0);
      planoTreino0.compareTo(planoTreino1);
      planoTreino1.clone();
      utilizadorAmador0.getAtividadesIsoladas();
      // Undeclared exception!
      try { 
        planoTreino0.addAtividade((Atividade) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockHijrahDate.now();
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getCodPlano();
      planoTreino0.getAtividades();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      ZoneOffset zoneOffset1 = ZoneOffset.UTC;
      zoneOffset0.compareTo(zoneOffset1);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1, 10.0, 10.0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(514, trail0);
      planoTreino_AtividadeIteracoes0.setAtividade(trail0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) localDate0);
      Btt btt0 = new Btt(localDateTime0, localTime0, 0, 176.82953766, 514);
      Btt btt1 = new Btt(btt0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) btt1);
      predicate1.or(predicate2);
      planoTreino_AtividadeIteracoes0.setIteracoes(1);
      planoTreino0.addAtividade(trail0, 70);
      planoTreino0.toString();
      planoTreino_AtividadeIteracoes0.getIteracoes();
      planoTreino0.getAtividades();
      planoTreino_AtividadeIteracoes0.clone();
      planoTreino_AtividadeIteracoes0.getAtividade();
      LocalDate localDate1 = planoTreino0.getDataRealizacao();
      planoTreino_AtividadeIteracoes0.clone();
      LocalDate localDate2 = planoTreino0.getDataRealizacao();
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.clone();
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate1, predicate0);
      planoTreino1.getAtividadesNumPeriodo(localDate2, localDate2);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1 bpm\nDistancia: 10.0 metros\nAltimetria: 10.0 metros\nTipo de atividade: Trail\nIteracoes: 70\n", "Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1 bpm\nDistancia: 10.0 metros\nAltimetria: 10.0 metros\nTipo de atividade: Trail\nIteracoes: 70\n", "Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1 bpm\nDistancia: 10.0 metros\nAltimetria: 10.0 metros\nTipo de atividade: Trail\nIteracoes: 70\n", 0, 1280, 1, localDate2, 'J');
      planoTreino1.caloriasDispendidas(utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getCodPlano();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      ZoneOffset zoneOffset1 = ZoneOffset.UTC;
      zoneOffset0.compareTo(zoneOffset1);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1, 0, 0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(514, trail0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      Predicate.isEqual((Object) localDate0);
      planoTreino_AtividadeIteracoes0.setIteracoes(1);
      planoTreino0.addAtividade(trail0, 70);
      planoTreino0.toString();
      LinkedList<PlanoTreino.AtividadeIteracoes> linkedList0 = new LinkedList<PlanoTreino.AtividadeIteracoes>();
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.clone();
      planoTreino1.getAtividadesNumPeriodo(localDate0, localDate0);
      planoTreino1.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: Trail\nIteracoes: 70\n", "", (String) null, (-4480), 70, 2008, localDate0, 'f');
      planoTreino1.caloriasDispendidas(utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Period period0 = Period.ofDays(1);
      period0.multipliedBy(1105);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("dd/MM/yyyy", "51s?8a,ESL{,:\u0003T!2", "51s?8a,ESL{,:\u0003T!2", (-18), 1, (-18), localDate0, '_');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId((-18));
      planoTreino0.setProximoCodigo((-18));
      planoTreino0.caloriasDispendidas(utilizadorAmador0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.clone();
      planoTreino0.caloriasDispendidas(utilizadorPraticanteOcasional0);
      PlanoTreino planoTreino1 = new PlanoTreino(localDate0);
      planoTreino0.compareTo(planoTreino1);
      PlanoTreino planoTreino2 = (PlanoTreino)planoTreino1.clone();
      LocalDate localDate1 = planoTreino1.getDataRealizacao();
      List<Atividade> list0 = utilizadorAmador0.getAtividadesIsoladas();
      utilizadorPraticanteOcasional0.getAtividadesIsoladas();
      planoTreino2.getCodPlano();
      // Undeclared exception!
      planoTreino0.geraPlanoTreino(utilizadorPraticanteOcasional0, list0, 1, 1105, (-1351.1443892626635), localDate1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.now();
      planoTreino0.getAtividades();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino0);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      planoTreino0.getDataRealizacao();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      Duration duration0 = Duration.ofMinutes(167L);
      Clock clock1 = MockClock.tick(clock0, duration0);
      LocalDate localDate0 = MockLocalDate.now(clock1);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino0.compareTo(planoTreino1);
      planoTreino1.compareTo(planoTreino0);
      planoTreino0.getCodPlano();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(0);
      LegPress legPress0 = new LegPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      planoTreino0.getCodPlano();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = (PlanoTreino.AtividadeIteracoes)planoTreino_AtividadeIteracoes0.clone();
      planoTreino_AtividadeIteracoes1.setIteracoes(28);
      planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Trail trail0 = new Trail();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, trail0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      trail0.setAltimetria(1067.345);
      Atividade atividade0 = planoTreino_AtividadeIteracoes0.getAtividade();
      Abdominais abdominais0 = new Abdominais();
      Corrida corrida0 = new Corrida();
      abdominais0.equals(corrida0);
      planoTreino_AtividadeIteracoes0.equals(abdominais0);
      planoTreino_AtividadeIteracoes0.equals(trail0);
      planoTreino0.addAtividade(atividade0, 0);
      Period period0 = Period.of(10, 1763, 0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(10);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      planoTreino_AtividadeIteracoes0.equals(trail0);
      ZoneId zoneId0 = zoneOffset0.normalized();
      LocalDate localDate1 = MockLocalDate.now(zoneId0);
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate1);
      Utilizador utilizador0 = null;
      // Undeclared exception!
      try { 
        planoTreino0.caloriasDispendidas((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Trail", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Trail trail0 = new Trail();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, trail0);
      planoTreino_AtividadeIteracoes0.clone();
      trail0.setAltimetria(1067.345);
      Atividade atividade0 = planoTreino_AtividadeIteracoes0.getAtividade();
      MinguoDate minguoDate0 = MockMinguoDate.now();
      planoTreino_AtividadeIteracoes0.equals(minguoDate0);
      Abdominais abdominais0 = new Abdominais();
      atividade0.setFreqCardiaca((-1));
      planoTreino_AtividadeIteracoes0.equals(trail0);
      planoTreino0.addAtividade(atividade0, 0);
      Period period0 = Period.of(10, 1741, 10);
      Period period1 = period0.minusYears(0L);
      period1.getChronology();
      String string0 = "";
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino0.compareTo(planoTreino1);
      // Undeclared exception!
      try { 
        planoTreino0.getAtividadesNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.toString();
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino1.getAtividades();
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1);
      int int0 = (-640);
      LocalDate localDate0 = null;
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) "Plano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n");
      // Undeclared exception!
      try { 
        planoTreino2.atividadesQueRespeitamP((LocalDate) null, (LocalDate) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Corrida corrida0 = new Corrida();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((-821), corrida0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      Abdominais abdominais0 = new Abdominais();
      planoTreino_AtividadeIteracoes1.setAtividade(abdominais0);
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getCodPlano();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      ZoneOffset zoneOffset1 = ZoneOffset.UTC;
      Trail trail0 = new Trail(localDateTime0, localTime0, 1, 1, 1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1, trail0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      Predicate.isEqual((Object) localDate0);
      planoTreino0.addAtividade(trail0, 1);
      planoTreino0.toString();
      LinkedList<PlanoTreino.AtividadeIteracoes> linkedList0 = new LinkedList<PlanoTreino.AtividadeIteracoes>();
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.clone();
      planoTreino1.getAtividadesNumPeriodo(localDate0, localDate0);
      List<Atividade> list0 = planoTreino1.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1 bpm\nDistancia: 1.0 metros\nAltimetria: 1.0 metros\nTipo de atividade: Trail\nIteracoes: 1\n", "Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1 bpm\nDistancia: 1.0 metros\nAltimetria: 1.0 metros\nTipo de atividade: Trail\nIteracoes: 1\n", (String) null, (-4480), 1, (-4480), localDate0, 'f');
      planoTreino1.caloriasDispendidas(utilizadorProfissional0);
      // Undeclared exception!
      planoTreino1.geraPlanoTreino(utilizadorProfissional0, list0, 1, 15, 1, localDate0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Trail trail0 = new Trail();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, trail0);
      planoTreino_AtividadeIteracoes0.clone();
      trail0.setAltimetria(1067.345);
      Atividade atividade0 = planoTreino_AtividadeIteracoes0.getAtividade();
      Abdominais abdominais0 = new Abdominais();
      planoTreino_AtividadeIteracoes0.equals(abdominais0);
      planoTreino_AtividadeIteracoes0.equals(trail0);
      planoTreino0.addAtividade(atividade0, 0);
      Period period0 = Period.of(10, 1741, 10);
      Period period1 = period0.minusYears(0L);
      period1.getChronology();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        planoTreino0.caloriasDispendidas(utilizadorPraticanteOcasional0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Frequ\u00EAncia card\u00EDaca da atividade n\u00E3o pode ser zero.
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId((-111));
      BenchPress benchPress0 = new BenchPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((-111), benchPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.setIteracoes((-111));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress(legPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1804, legPress1);
      Utilizador utilizador0 = null;
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      planoTreino0.getAtividades();
      LocalDate localDate0 = null;
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino((Utilizador) null, linkedList0, 1804, 1804, 1804, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nAtividades e suas itera\u00E7oes: \n", "\nAtividades e suas itera\u00E7oes: \n", "\nAtividades e suas itera\u00E7oes: \n", 4517, 0, 4517, (LocalDate) null, '9');
      planoTreino0.caloriasDispendidas(utilizadorPraticanteOcasional0);
      planoTreino0.toString();
      planoTreino0.getDataRealizacao();
      planoTreino0.getAtividades();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PlanoTreino planoTreino0 = null;
      try {
        planoTreino0 = new PlanoTreino((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino planoTreino1 = null;
      // Undeclared exception!
      try { 
        planoTreino0.compareTo((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      int int0 = 0;
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(0);
      LocalDate localDate0 = null;
      PlanoTreino planoTreino1 = null;
      try {
        planoTreino1 = new PlanoTreino(planoTreino0, (LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId((-1));
      planoTreino0.caloriasDispendidas(utilizadorAmador0);
      planoTreino0.setProximoCodigo(4);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.getAtividades();
      PlanoTreino planoTreino1 = new PlanoTreino();
      planoTreino0.compareTo(planoTreino1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      int int0 = (-1831);
      int int1 = 3157;
      // Undeclared exception!
      try { 
        planoTreino0.planoTreinoNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      LocalDate localDate1 = MockLocalDate.ofYearDay(4035, 7);
      planoTreino0.setDataRealizacao(localDate1);
      planoTreino0.setDataRealizacao(localDate0);
      Abdominais abdominais0 = new Abdominais();
      abdominais0.toString();
      planoTreino0.addAtividade(abdominais0, 21);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) abdominais0);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino0.atividadesQueRespeitamP(localDate1, localDate1, predicate0);
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.planoTreinoNumPeriodo(localDate0, localDate1);
      List<Atividade> list0 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate1, predicate0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0);
      // Undeclared exception!
      planoTreino1.geraPlanoTreino(utilizadorPraticanteOcasional1, list0, (-871), 7, 0.0, localDate0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      System.setCurrentTimeMillis(449L);
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino1.getAtividades();
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1, localDate0, localDate0);
      planoTreino2.planoTreinoNumPeriodo(localDate0, localDate0);
      Utilizador utilizador0 = null;
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes((-1), (-1));
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Trail trail0 = new Trail(localDateTime0, localTime0, 10, 449L, (-125.17937218622));
      linkedList0.add((Atividade) trail0);
      int int0 = 21;
      // Undeclared exception!
      try { 
        planoTreino1.geraPlanoTreino((Utilizador) null, linkedList0, 21, 21, 2.2, localDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1967L));
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      LocalDate localDate1 = MockLocalDate.now();
      Abdominais abdominais0 = new Abdominais();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) abdominais0);
      planoTreino0.addAtividade(abdominais0, (-2339));
      planoTreino0.atividadesQueRespeitamP(localDate1, localDate1, predicate0);
      planoTreino0.getAtividadesNumPeriodo(localDate1, localDate1);
      List<Atividade> list0 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate1, predicate0);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino0.clone();
      planoTreino0.toString();
      planoTreino0.clone();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      planoTreino0.geraPlanoTreino(utilizadorProfissional0, list0, (-2339), (-2339), (-2598.8645618434), localDate1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorAmador0.addAtividade(bicepCurls0);
      List<Atividade> list0 = utilizadorAmador0.getAtividadesIsoladas();
      planoTreino0.geraPlanoTreino(utilizadorProfissional0, list0, 2048, 2048, 2048, localDate0);
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      planoTreino0.toString();
      planoTreino0.clone();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.setDataRealizacao(localDate0);
      Abdominais abdominais0 = new Abdominais();
      planoTreino0.addAtividade(abdominais0, 21);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) abdominais0);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      LocalDate localDate0 = MockLocalDate.now();
      planoTreino1.setDataRealizacao(localDate0);
      planoTreino1.getCodPlano();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.now();
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getCodPlano();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Corrida corrida0 = new Corrida();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((-1704), corrida0);
      planoTreino_AtividadeIteracoes0.equals(corrida0);
      planoTreino_AtividadeIteracoes0.equals((Object) null);
      planoTreino_AtividadeIteracoes0.setIteracoes((-1704));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.compareTo(planoTreino0);
      System.setCurrentTimeMillis(0);
      planoTreino0.toString();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      PlanoTreino planoTreino1 = new PlanoTreino(localDate0);
      Btt btt0 = new Btt();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      planoTreino1.addAtividade(btt0, 0);
      planoTreino0.setProximoCodigo(0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      List<Atividade> list0 = utilizadorAmador0.getAtividadesIsoladas();
      planoTreino0.geraPlanoTreino(utilizadorPraticanteOcasional0, list0, 0, 0, 0, localDate0);
      planoTreino0.compareTo(planoTreino1);
      planoTreino1.compareTo(planoTreino0);
      PlanoTreino planoTreino2 = (PlanoTreino)planoTreino1.planoTreinoNumPeriodo(localDate0, localDate0);
      LocalDate localDate1 = MockLocalDate.ofEpochDay(44);
      planoTreino2.planoTreinoNumPeriodo(localDate1, localDate1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      System.setCurrentTimeMillis(449L);
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino1.getAtividades();
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1, localDate0, localDate0);
      planoTreino2.planoTreinoNumPeriodo(localDate0, localDate0);
      Utilizador utilizador0 = null;
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes((-1), (-1));
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Trail trail0 = new Trail(localDateTime0, localTime0, 10, 449L, (-125.17937218622));
      trail0.toString();
      linkedList0.add((Atividade) trail0);
      int int0 = 21;
      double double0 = 2.2;
      // Undeclared exception!
      planoTreino2.geraPlanoTreino((Utilizador) null, linkedList0, (-1), 4, 583.021639, localDate0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockHijrahDate.now();
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getCodPlano();
      planoTreino0.getAtividades();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      ZoneOffset zoneOffset1 = ZoneOffset.UTC;
      zoneOffset0.compareTo(zoneOffset1);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1, 10.0, 10.0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(514, trail0);
      planoTreino_AtividadeIteracoes0.setAtividade(trail0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) localDate0);
      Btt btt0 = new Btt(localDateTime0, localTime0, 0, 176.82953766, 514);
      Btt btt1 = new Btt(btt0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) btt1);
      predicate1.or(predicate2);
      planoTreino_AtividadeIteracoes0.setIteracoes(1);
      planoTreino0.addAtividade(trail0, 70);
      planoTreino0.toString();
      planoTreino_AtividadeIteracoes0.getIteracoes();
      planoTreino_AtividadeIteracoes0.clone();
      planoTreino_AtividadeIteracoes0.getAtividade();
      LocalDate localDate1 = planoTreino0.getDataRealizacao();
      planoTreino_AtividadeIteracoes0.clone();
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.clone();
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate1, predicate0);
      planoTreino1.getAtividadesNumPeriodo(localDate1, localDate1);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1 bpm\nDistancia: 10.0 metros\nAltimetria: 10.0 metros\nTipo de atividade: Trail\nIteracoes: 70\n", "Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1 bpm\nDistancia: 10.0 metros\nAltimetria: 10.0 metros\nTipo de atividade: Trail\nIteracoes: 70\n", "Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1 bpm\nDistancia: 10.0 metros\nAltimetria: 10.0 metros\nTipo de atividade: Trail\nIteracoes: 70\n", 0, 1, 1, localDate0, 'J');
      planoTreino1.caloriasDispendidas(utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      LegPress legPress0 = new LegPress();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(0);
      LegPress legPress0 = new LegPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      Object object0 = planoTreino_AtividadeIteracoes0.clone();
      planoTreino_AtividadeIteracoes0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      LegPress legPress0 = new LegPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      LocalTime localTime0 = MockLocalTime.now();
      legPress0.setTempo(localTime0);
      planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(10);
      LegPress legPress0 = new LegPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(10, legPress0);
      planoTreino0.getCodPlano();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino0.getAtividades();
      planoTreino_AtividadeIteracoes1.setIteracoes(9);
      planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      System.setCurrentTimeMillis(449L);
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino1.getAtividades();
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1, localDate0, localDate0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes((-1), (-1));
      zoneOffset0.normalized();
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Trail trail0 = new Trail(localDateTime0, localTime0, (-1), 449L, (-125.17937218622));
      linkedList0.add((Atividade) trail0);
      Clock clock0 = MockClock.systemUTC();
      Duration duration0 = Duration.ofMillis(449L);
      Clock clock1 = MockClock.offset(clock0, duration0);
      LocalTime localTime1 = MockLocalTime.now(clock1);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime1, 1992, (-1096.9271));
      Ciclismo ciclismo1 = new Ciclismo(ciclismo0);
      linkedList0.add((Atividade) ciclismo1);
      planoTreino1.geraPlanoTreino((Utilizador) null, linkedList0, (-19), (-19), 10.0, localDate0);
      planoTreino2.toString();
      Ciclismo ciclismo2 = new Ciclismo();
      Ciclismo ciclismo3 = new Ciclismo(ciclismo2);
      ciclismo2.getVelocidade();
      LocalDateTime localDateTime1 = MockLocalDateTime.now();
      ciclismo2.setDataRealizacao(localDateTime1);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) ciclismo3);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino0.geraPlanoTreino((Utilizador) null, linkedList0, (-19), (-19), (-19), localDate0);
      planoTreino0.getAtividades();
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      LocalDate localDate1 = MockLocalDate.ofYearDay(4035, 47);
      planoTreino0.setDataRealizacao(localDate1);
      planoTreino0.setDataRealizacao(localDate0);
      Abdominais abdominais0 = new Abdominais();
      abdominais0.toString();
      planoTreino0.addAtividade(abdominais0, 21);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) abdominais0);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino0.atividadesQueRespeitamP(localDate1, localDate1, predicate0);
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.planoTreinoNumPeriodo(localDate0, localDate1);
      List<Atividade> list0 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate1, predicate0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0);
      // Undeclared exception!
      planoTreino1.geraPlanoTreino(utilizadorPraticanteOcasional1, list0, (-850), 47, 0.0, localDate0);
  }
}
