/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 19:52:17 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.UtilizadorPraticanteOcasional;
import java.time.LocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class UtilizadorPraticanteOcasional_ESTest extends UtilizadorPraticanteOcasional_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", 0, 0, 0, localDate0, 'U');
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.utilizadorNumPeriodo((LocalDate) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nTipo de Utilizador: Praticante Ocasional\n", "\nTipo de Utilizador: Praticante Ocasional\n", "q&*I#", 0, 0, 0, (LocalDate) null, '7');
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setDataNascimento((LocalDate) null);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Object object0 = utilizadorPraticanteOcasional0.utilizadorNumPeriodo(localDate0, localDate0);
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, "", "", (-1071), 0, (-979), (LocalDate) null, 'N');
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = null;
      try {
        utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0, (LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = null;
      try {
        utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((UtilizadorPraticanteOcasional) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, "", "", (-1071), 0, (-979), (LocalDate) null, 'N');
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0);
      assertEquals('N', utilizadorPraticanteOcasional1.getGenero());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(7L);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0, localDate0, localDate0);
      assertEquals("", utilizadorPraticanteOcasional1.getNome());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Object object0 = utilizadorPraticanteOcasional0.utilizadorNumPeriodo(localDate0, localDate0);
      utilizadorPraticanteOcasional0.equals(object0);
      assertNotSame(object0, utilizadorPraticanteOcasional0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("`wFJV9S", "`wFJV9S", "`wFJV9S", 1441, 1441, 1441, localDate0, 'f');
      boolean boolean0 = utilizadorPraticanteOcasional0.equals(utilizadorPraticanteOcasional0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("`wFJV9S", "`wFJV9S", "`wFJV9S", 1441, 1441, 1441, localDate0, 'f');
      boolean boolean0 = utilizadorPraticanteOcasional0.equals("`wFJV9S");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("`wFJV9S", "`wFJV9S", "`wFJV9S", 1441, 1441, 1441, localDate0, 'f');
      String string0 = utilizadorPraticanteOcasional0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: `wFJV9S\nMorada: `wFJV9S\nEmail: `wFJV9S\nFrequencia Cardiaca: 1441 bpm\nPeso: 1441.0 kilos\nAltura: 1441 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: f\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Praticante Ocasional\n", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", 0, 0, 0, localDate0, 'U');
      Object object0 = utilizadorPraticanteOcasional0.clone();
      assertNotSame(object0, utilizadorPraticanteOcasional0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("`wFJV9S", "`wFJV9S", "`wFJV9S", 1441, 1441, 1441, localDate0, 'f');
      double double0 = utilizadorPraticanteOcasional0.getFatorMultiplicativo();
      assertEquals(1.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      boolean boolean0 = utilizadorPraticanteOcasional0.equals((Object) null);
      assertFalse(boolean0);
  }
}
