/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 19:48:39 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.Atividade;
import com.mycompany.solucao1.BenchPress;
import com.mycompany.solucao1.LegPress;
import com.mycompany.solucao1.Utilizador;
import com.mycompany.solucao1.UtilizadorPraticanteOcasional;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class LegPress_ESTest extends LegPress_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, (-16), (-16), (-16));
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", (-16), (-16), (-16), localDate0, '?');
      utilizadorPraticanteOcasional0.addAtividade(legPress0);
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorPraticanteOcasional0, '?');
      assertEquals((-12.8), legPress1.getPeso(), 0.01);
      assertEquals((-1046), legPress1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 1, 1, 1);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", 1, 1, 1, localDate0, '?');
      utilizadorPraticanteOcasional0.addAtividade(legPress0);
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorPraticanteOcasional0, '?');
      assertEquals(16748, legPress1.getRepeticoes());
      assertEquals(0.8, legPress1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.setProximoCodigo(0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Atividade atividade0 = legPress0.geraAtividade(utilizadorPraticanteOcasional0, 1.1250146763745035);
      assertTrue(atividade0.equals((Object)legPress0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.setProximoCodigo((-357913942));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Atividade atividade0 = legPress0.geraAtividade(utilizadorPraticanteOcasional0, 1.1250146763745035);
      assertTrue(atividade0.equals((Object)legPress0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, (-16), (-16), (-16));
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", (-16), (-16), (-16), localDate0, '?');
      utilizadorPraticanteOcasional0.setPeso(10.0);
      double double0 = legPress0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 1, 1, 1);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", 1, 1, 1, localDate0, '?');
      double double0 = legPress0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(68.91312789351852, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, (-16), (-16), (-16));
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", (-16), (-16), (-16), localDate0, '?');
      double double0 = legPress0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals((-1102.5691203703702), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.setDataRealizacao((LocalDateTime) null);
      // Undeclared exception!
      try { 
        legPress0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("=uf/%^o(Oj", "=uf/%^o(Oj", "", (-1), 2879, 2879, (LocalDate) null, '\'');
      // Undeclared exception!
      try { 
        legPress0.geraAtividade(utilizadorPraticanteOcasional0, 2879);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      // Undeclared exception!
      try { 
        legPress0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.LegPress", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LegPress legPress0 = null;
      try {
        legPress0 = new LegPress((LegPress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress(legPress0);
      assertTrue(legPress1.equals((Object)legPress0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, (-16), (-16), (-16));
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", (-16), (-16), (-16), localDate0, '?');
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorPraticanteOcasional0, 148);
      boolean boolean0 = legPress0.equals(legPress1);
      assertFalse(boolean0);
      assertEquals((-16.0), legPress1.getPeso(), 0.01);
      assertEquals((-2459), legPress1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      boolean boolean0 = legPress0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      boolean boolean0 = legPress0.equals(legPress0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, (-16), (-16), (-16));
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 148, (-16), (-16));
      boolean boolean0 = legPress0.equals(benchPress0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        legPress0.consumoCalorias(utilizadorProfissional0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Frequ\u00EAncia card\u00EDaca da atividade n\u00E3o pode ser zero.
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LegPress legPress0 = new LegPress(localDateTime0, (LocalTime) null, 3, 3, 3);
      Object object0 = legPress0.clone();
      // Undeclared exception!
      try { 
        legPress0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LegPress legPress0 = new LegPress(localDateTime0, (LocalTime) null, 3, 3, 3);
      String string0 = legPress0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: null\nFrequencia Cardiaca: 3 bpm\nRepeti\u00E7oes: 3\nPeso: 3.0 kilos\nTipo de atividade: Leg press\n", string0);
  }
}
