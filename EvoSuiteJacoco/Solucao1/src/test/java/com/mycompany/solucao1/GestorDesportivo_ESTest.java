/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 19:34:00 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.Atividade;
import com.mycompany.solucao1.Ciclismo;
import com.mycompany.solucao1.GestorDesportivo;
import com.mycompany.solucao1.PlanoTreino;
import com.mycompany.solucao1.Utilizador;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class GestorDesportivo_ESTest extends GestorDesportivo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepsPesoPlano(5, 5, localDateTime0, localTime0, 0, 0, 0, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.now();
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepsPesoPlano(0, 0, (LocalDateTime) null, localTime0, 0, 10, 0.0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(3225L);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepPlano(1, 1, localDateTime0, localTime0, 1, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(863);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistAltPlano(863, 863, localDateTime0, localTime0, 863, 863, 863, 863);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(3225L);
      int int0 = gestorDesportivo0.addAtivRepsPeso(localDateTime0, localTime0, 5, 5, 3225L, 5);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(6);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1);
      int int0 = gestorDesportivo0.addAtivDistAlt(localDateTime0, localTime0, (-3045), 0.2, 0.0, (-439));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador(":_A*/l,((^r-9", "L", ":_A*/l,((^r-9", (-794), 2064, (-794), gestorDesportivo0.dataAtual, 'u', 3003);
      gestorDesportivo0.addPlanoTreino(gestorDesportivo0.dataAtual);
      gestorDesportivo0.registaPlanoTreino(1, 1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addPlanoTreino((LocalDate) null);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(0, 1, 1, 1, 1, 1);
      gestorDesportivo0.addAtivRepsPesoPlano(1, 'L', localDateTime0, (LocalTime) null, 1, 0, 'L', 7);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addPlanoTreino(gestorDesportivo0.dataAtual);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(2386L, 1, zoneOffset0);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(1142L);
      gestorDesportivo0.addAtivRepPlano(1, 554, localDateTime0, localTime0, 0, (-972), 1031);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.now();
      gestorDesportivo0.addPlanoTreino(gestorDesportivo0.dataAtual);
      gestorDesportivo0.addAtivDistPlano(1, 1, (LocalDateTime) null, localTime0, 0, 1462L, 1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addPlanoTreino(gestorDesportivo0.dataAtual);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      gestorDesportivo0.addAtivDistAltPlano(1, (-2135141785), localDateTime0, localTime0, (-1202), 0.0, (-1), 1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      HashMap<Integer, Utilizador> hashMap0 = new HashMap<Integer, Utilizador>();
      Integer integer0 = new Integer((-2717));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      hashMap0.put(integer0, utilizadorProfissional0);
      gestorDesportivo0.utilizadoresNumPeriodo = (Map<Integer, Utilizador>) hashMap0;
      Utilizador utilizador0 = gestorDesportivo0.maisCaloriasGastas(gestorDesportivo0.dataAtual, gestorDesportivo0.dataAtual);
      assertEquals("", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", 0, 0, 0, gestorDesportivo0.dataAtual, '-', 0);
      gestorDesportivo0.atualizaInfo(gestorDesportivo0.dataAtual);
      Utilizador utilizador0 = gestorDesportivo0.maisCaloriasGastas(gestorDesportivo0.dataAtual, gestorDesportivo0.dataAtual);
      assertEquals('-', utilizador0.getGenero());
      assertEquals(0, utilizador0.getAltura());
      assertEquals(0.0, utilizador0.getPeso(), 0.01);
      assertEquals(0, utilizador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", 7, 7, 7, gestorDesportivo0.dataAtual, '-', 7);
      gestorDesportivo0.atualizaInfo(gestorDesportivo0.dataAtual);
      Utilizador utilizador0 = gestorDesportivo0.maisCaloriasGastas(gestorDesportivo0.dataAtual, gestorDesportivo0.dataAtual);
      assertEquals('-', utilizador0.getGenero());
      assertEquals(7.0, utilizador0.getPeso(), 0.01);
      assertEquals(7, utilizador0.getAltura());
      assertEquals(7, utilizador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", (-17), (-17), (-17), gestorDesportivo0.dataAtual, '-', (-17));
      gestorDesportivo0.atualizaInfo(gestorDesportivo0.dataAtual);
      Utilizador utilizador0 = gestorDesportivo0.maisCaloriasGastas(gestorDesportivo0.dataAtual, gestorDesportivo0.dataAtual);
      assertEquals((-17), utilizador0.getFreqCardiaca());
      assertEquals('-', utilizador0.getGenero());
      assertEquals((-17), utilizador0.getAltura());
      assertEquals((-17.0), utilizador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", 0, 0, 0, gestorDesportivo0.dataAtual, '-', 0);
      gestorDesportivo0.atualizaInfo(gestorDesportivo0.dataAtual);
      Utilizador utilizador0 = gestorDesportivo0.maisAtividades(gestorDesportivo0.dataAtual, gestorDesportivo0.dataAtual);
      assertEquals('-', utilizador0.getGenero());
      assertEquals(0.0, utilizador0.getPeso(), 0.01);
      assertEquals(0, utilizador0.getAltura());
      assertEquals(0, utilizador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", 7, 7, 7, gestorDesportivo0.dataAtual, '-', 7);
      gestorDesportivo0.atualizaInfo(gestorDesportivo0.dataAtual);
      Utilizador utilizador0 = gestorDesportivo0.maisAtividades(gestorDesportivo0.dataAtual, gestorDesportivo0.dataAtual);
      assertEquals(7.0, utilizador0.getPeso(), 0.01);
      assertEquals(7, utilizador0.getAltura());
      assertEquals(7, utilizador0.getFreqCardiaca());
      assertEquals('-', utilizador0.getGenero());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", (-17), (-17), (-17), gestorDesportivo0.dataAtual, '-', (-17));
      gestorDesportivo0.atualizaInfo(gestorDesportivo0.dataAtual);
      Utilizador utilizador0 = gestorDesportivo0.maisAtividades(gestorDesportivo0.dataAtual, gestorDesportivo0.dataAtual);
      assertEquals((-17.0), utilizador0.getPeso(), 0.01);
      assertEquals((-17), utilizador0.getAltura());
      assertEquals((-17), utilizador0.getFreqCardiaca());
      assertEquals('-', utilizador0.getGenero());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[0];
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", 7, 7, 7, gestorDesportivo0.dataAtual, '-', 7);
      gestorDesportivo0.atualizaInfo(gestorDesportivo0.dataAtual);
      double double0 = gestorDesportivo0.kmsPercorridos(1, gestorDesportivo0.dataAtual, gestorDesportivo0.dataAtual);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.utilizadores = null;
      Class<Ciclismo> class0 = Ciclismo.class;
      // Undeclared exception!
      try { 
        gestorDesportivo0.recordMaisRepeticoes(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.utilizadores = null;
      Class<UtilizadorProfissional> class0 = UtilizadorProfissional.class;
      // Undeclared exception!
      try { 
        gestorDesportivo0.recordMaisCalorias(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("n~G>xm?;!f8^_L", "n~G>xm?;!f8^_L", "n~G>xm?;!f8^_L", 2147483645, 2147483645, 2147483645, gestorDesportivo0.dataAtual, '~', 1);
      Integer integer0 = new Integer(1);
      int[] intArray0 = new int[3];
      gestorDesportivo0.geraPlanoTreinoUtilizador((int) integer0, intArray0, 1, (int) integer0, (-5235.014089), gestorDesportivo0.dataAtual);
      // Undeclared exception!
      try { 
        gestorDesportivo0.recordMaiorAltimetria((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("gcNB0%{e.}E2wnrh", (String) null, "gcNB0%{e.}E2wnrh", 0, 2706, 1394, (LocalDate) null, '-', 0);
      gestorDesportivo0.atualizaInfo(gestorDesportivo0.dataAtual);
      // Undeclared exception!
      try { 
        gestorDesportivo0.mostraInfo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.listaAtividades((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.guardaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      try { 
        gestorDesportivo0.guardaEstado("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[7];
      // Undeclared exception!
      gestorDesportivo0.geraPlanoTreinoUtilizador(8, intArray0, 8, 983, 983, gestorDesportivo0.dataAtual);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        gestorDesportivo0.geraPlanoTreinoUtilizador(4, intArray0, 4, 1, 0, gestorDesportivo0.dataAtual);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Corrida", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        gestorDesportivo0.geraPlanoTreinoUtilizador((-1784), intArray0, 1264, 1264, (-1784), gestorDesportivo0.dataAtual);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.utilizadores = null;
      // Undeclared exception!
      try { 
        gestorDesportivo0.existeUtilizador((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Month month0 = Month.AUGUST;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(7, month0, 7, 7, 7, 7, 7);
      int[] intArray0 = new int[2];
      gestorDesportivo0.listaAtividades(intArray0);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(1L);
      gestorDesportivo0.addAtivRep(localDateTime0, localTime0, 7, 7, 987);
      // Undeclared exception!
      try { 
        gestorDesportivo0.estadoAtualizado();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.carregaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("$xxWVT");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        gestorDesportivo0.carregaEstado("$xxWVT");
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 00000000
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("=<CW{\"@ol/u:n\"m<X", "", "", (-3633), (-3633), (-3633), (LocalDate) null, 'A', 808);
      // Undeclared exception!
      try { 
        gestorDesportivo0.atualizaInfo((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.atividadesUtilizador(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.atividadesExecutadasUtilizador((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.utilizadoresNumPeriodo = null;
      // Undeclared exception!
      try { 
        gestorDesportivo0.atividadeMaisRealizada();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.utilizadores = null;
      // Undeclared exception!
      try { 
        gestorDesportivo0.addUtilizador(":_A*/l,((^r-9", "L", ":_A*/l,((^r-9", (-794), 2064, (-794), gestorDesportivo0.dataAtual, 'u', 3003);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(3225L);
      gestorDesportivo0.atividades = null;
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRep(localDateTime0, localTime0, 2, 5, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[8];
      intArray0[5] = 8;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[8];
      intArray0[4] = 1;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[9];
      intArray0[0] = 9;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(9, list0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[2];
      intArray0[0] = 7;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[6];
      intArray0[1] = 6;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[8];
      intArray0[7] = 5;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[3];
      intArray0[1] = 4;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[9];
      intArray0[7] = 3;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(9, list0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[7];
      intArray0[1] = 2;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", (-17), (-17), (-17), gestorDesportivo0.dataAtual, '-', (-17));
      gestorDesportivo0.atualizaInfo(gestorDesportivo0.dataAtual);
      String string0 = gestorDesportivo0.mostraInfo();
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: gcNB0%{e.}E2wnrh\nMorada: gcNB0%{e.}E2wnrh\nEmail: gcNB0%{e.}E2wnrh\nFrequencia Cardiaca: -17 bpm\nPeso: -17.0 kilos\nAltura: -17 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: -\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Praticante Ocasional\n", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.mostraInfo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("n~G>xm?;!f8^_L", "n~G>xm?;!f8^_L", "n~G>xm?;!f8^_L", 2147483645, 2147483645, 2147483645, gestorDesportivo0.dataAtual, '~', 1);
      Integer integer0 = new Integer(1);
      int[] intArray0 = new int[3];
      gestorDesportivo0.geraPlanoTreinoUtilizador((int) integer0, intArray0, 1, (int) integer0, (-5235.014089), gestorDesportivo0.dataAtual);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      String string0 = gestorDesportivo0.atividadesUtilizador(1);
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Corrida\n", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", (-17), (-17), (-17), gestorDesportivo0.dataAtual, '-', (-17));
      gestorDesportivo0.atualizaInfo(gestorDesportivo0.dataAtual);
      String string0 = gestorDesportivo0.atividadesExecutadasUtilizador(1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Instant instant0 = MockInstant.ofEpochSecond((long) 1);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepsPesoPlano('~', 2147483645, localDateTime0, (LocalTime) null, '~', 2147483645, 1, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(3225L);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepPlano(1, 1, localDateTime0, localTime0, 1, 1, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(10);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistAltPlano(10, 3, (LocalDateTime) null, localTime0, 10, 10, 10, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(1462L);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistPlano(1, 1, (LocalDateTime) null, localTime0, 0, 1462L, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(7, 7, 7, 7, 7);
      LocalTime localTime0 = MockLocalTime.of(7, 7, 7);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistPlano(7, 7, localDateTime0, localTime0, 2, 7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      int int0 = gestorDesportivo0.addAtivRepsPeso(localDateTime0, (LocalTime) null, 1, 1, 1, 8);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(7, 7, 7, 7, 7);
      LocalTime localTime0 = MockLocalTime.of(7, 7, 7);
      int int0 = gestorDesportivo0.addAtivRepsPeso(localDateTime0, localTime0, 7, 7, 7, 7);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(3225L);
      int int0 = gestorDesportivo0.addAtivRepsPeso(localDateTime0, localTime0, 5, 5, 3225L, 1477);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(3225L);
      int int0 = gestorDesportivo0.addAtivRep(localDateTime0, localTime0, 5, 5, 5);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(3225L);
      int int0 = gestorDesportivo0.addAtivDistAlt(localDateTime0, localTime0, 5, 0.31742826826426995, 5, 3);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(3225L);
      int int0 = gestorDesportivo0.addAtivDistAlt(localDateTime0, localTime0, 0, (-2.374723472915806), 775, 5);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(482L);
      int int0 = gestorDesportivo0.addAtivDist((LocalDateTime) null, localTime0, 1882, 1.0, 1882);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addPlanoTreino(gestorDesportivo0.dataAtual);
      boolean boolean0 = gestorDesportivo0.existePlano(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      boolean boolean0 = gestorDesportivo0.existePlano((-17));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-3410));
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond((-213L), 6, zoneOffset0);
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      gestorDesportivo0.addAtivDist(localDateTime0, localTime0, (-429), 6, 1);
      boolean boolean0 = gestorDesportivo0.existeAtividade(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      boolean boolean0 = gestorDesportivo0.existeAtividade(3051);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador(":_A*/l,((^r-9", "L", ":_A*/l,((^r-9", (-794), 2064, (-794), gestorDesportivo0.dataAtual, 'u', 3003);
      boolean boolean0 = gestorDesportivo0.existeUtilizador(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      boolean boolean0 = gestorDesportivo0.existeUtilizador((-3633));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.showPlanoTreino(7);
      assertEquals("Nao existe plano de treino com este codigo\n", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(482L);
      gestorDesportivo0.addAtivRep((LocalDateTime) null, localTime0, (-623), 247, 70);
      // Undeclared exception!
      try { 
        gestorDesportivo0.showAtividade(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.showAtividade(2);
      assertEquals("Nao existe atividade com este codigo\n", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("=<CW{\"@ol/u:n\"m<X", "", "", (-3633), (-3633), (-3633), (LocalDate) null, 'A', 808);
      // Undeclared exception!
      try { 
        gestorDesportivo0.showUtilizador(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.showUtilizador(7);
      assertEquals("Nao existe utilizador com este codigo\n", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int int0 = gestorDesportivo0.addUtilizador("", "Nao existe utilizador com este codigo\n", "=<CW{\"@ol/u:n\"m<X", 247, (-1993), 7, (LocalDate) null, 'H', 3);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("n~G>xm?;!f8^_L", "n~G>xm?;!f8^_L", "n~G>xm?;!f8^_L", 2147483645, 2147483645, 2147483645, gestorDesportivo0.dataAtual, '~', 1);
      String string0 = gestorDesportivo0.atividadesUtilizador(1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.atividadeMaisRealizada();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", (-17), (-17), (-17), gestorDesportivo0.dataAtual, '-', (-17));
      gestorDesportivo0.atualizaInfo(gestorDesportivo0.dataAtual);
      // Undeclared exception!
      try { 
        gestorDesportivo0.planoTreinoMaisCalorias(gestorDesportivo0.dataAtual);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      PlanoTreino planoTreino0 = gestorDesportivo0.planoTreinoMaisCalorias(gestorDesportivo0.dataAtual);
      assertNull(planoTreino0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", "gcNB0%{e.}E2wnrh", 2, 2, 2, gestorDesportivo0.dataAtual, 'W', 2);
      gestorDesportivo0.atualizaInfo(gestorDesportivo0.dataAtual);
      double double0 = gestorDesportivo0.metrosAltimetria(1, gestorDesportivo0.dataAtual, gestorDesportivo0.dataAtual);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addPlanoTreino(gestorDesportivo0.dataAtual);
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(3225L);
      gestorDesportivo0.addAtivRep(localDateTime0, localTime0, (-30), (-664), 0);
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("Nao existe utilizador com este codigo\n", "Nao existe utilizador com este codigo\n", "Nao existe utilizador com este codigo\n", 0, 0, 0, gestorDesportivo0.dataAtual, 'L', 'L');
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addPlanoTreino((LocalDate) null);
      String string0 = gestorDesportivo0.showPlanoTreino(1);
      assertEquals("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: null\nAtividades e suas itera\u00E7oes: \n", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.registaPlanoTreino((-3341), 707);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.metrosAltimetria(8, gestorDesportivo0.dataAtual, gestorDesportivo0.dataAtual);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.registaAtividade('u', 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.maisAtividades(gestorDesportivo0.dataAtual, gestorDesportivo0.dataAtual);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.kmsPercorridos(2, (LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      double double0 = gestorDesportivo0.recordMaiorAltimetria((Class<?>) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      try { 
        gestorDesportivo0.carregaEstado("K vQ$c;xCe1NUS");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.maisCaloriasGastas(gestorDesportivo0.dataAtual, gestorDesportivo0.dataAtual);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      try { 
        gestorDesportivo0.guardaEstado("com.mycompany.solucao1.GestorDesportivo");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }
}
