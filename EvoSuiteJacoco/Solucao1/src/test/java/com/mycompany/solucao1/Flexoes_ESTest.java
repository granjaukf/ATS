/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 19:51:34 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.Flexoes;
import com.mycompany.solucao1.Utilizador;
import com.mycompany.solucao1.UtilizadorAmador;
import com.mycompany.solucao1.UtilizadorPraticanteOcasional;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Flexoes_ESTest extends Flexoes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2159));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", (-2159), 1203, (-2159), localDate0, 'J');
      Flexoes flexoes1 = (Flexoes)flexoes0.geraAtividade(utilizadorProfissional0, 1203);
      assertEquals((-16311), flexoes1.getRepeticoes());
      assertEquals(0, flexoes1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      flexoes0.setProximoCodigo(0);
      Flexoes flexoes1 = (Flexoes)flexoes0.geraAtividade(utilizadorAmador0, 3.5);
      assertEquals(0, flexoes1.getFreqCardiaca());
      assertEquals(Integer.MAX_VALUE, flexoes1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      flexoes0.setProximoCodigo((-2479));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Flexoes flexoes1 = (Flexoes)flexoes0.geraAtividade(utilizadorProfissional0, 2788.01);
      assertEquals(0, flexoes1.getFreqCardiaca());
      assertEquals(Integer.MAX_VALUE, flexoes1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(11, 11, 11, 11, 11, 11, 11);
      LocalTime localTime0 = MockLocalTime.of(11, 11, 11);
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, 11, 11);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      double double0 = flexoes0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Month month0 = Month.SEPTEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(0, month0, 10, 0, 10, 4, 4);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(7L);
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, 10, 4266);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nTipo de atividade: Flex\u00F5es\n", "\nTipo de atividade: Flex\u00F5es\n", "\nTipo de atividade: Flex\u00F5es\n", 0, 'U', 0, localDate0, 'U');
      double double0 = flexoes0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(29.775824652777775, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Month month0 = Month.SEPTEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(0, month0, 10, 0, 10, 4, 4);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(7L);
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, 10, 4266);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nTipo de atividade: Flex\u00F5es\n", "`6", "\nTipo de atividade: Flex\u00F5es\n", (-1970), 0, (-1970), localDate0, 'U');
      double double0 = flexoes0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals((-706.433250144676), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1781L);
      Flexoes flexoes0 = new Flexoes((LocalDateTime) null, localTime0, 0, 0);
      // Undeclared exception!
      try { 
        flexoes0.geraAtividade((Utilizador) null, 3959.6257797503);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Flexoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        flexoes0.consumoCalorias(utilizadorAmador0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Frequ\u00EAncia card\u00EDaca da atividade n\u00E3o pode ser zero.
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Flexoes flexoes0 = null;
      try {
        flexoes0 = new Flexoes((Flexoes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      Flexoes flexoes1 = new Flexoes(flexoes0);
      flexoes1.setTempo((LocalTime) null);
      // Undeclared exception!
      try { 
        flexoes1.equals(flexoes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      boolean boolean0 = flexoes0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      boolean boolean0 = flexoes0.equals(flexoes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      boolean boolean0 = flexoes0.equals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nTipo de atividade: Flex\u00F5es\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      String string0 = flexoes0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nTipo de atividade: Flex\u00F5es\n", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      Object object0 = flexoes0.clone();
      boolean boolean0 = flexoes0.equals(object0);
      assertNotSame(object0, flexoes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      // Undeclared exception!
      try { 
        flexoes0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Flexoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Flexoes flexoes0 = new Flexoes((LocalDateTime) null, localTime0, 531, 531);
      // Undeclared exception!
      try { 
        flexoes0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }
}
