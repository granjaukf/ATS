/*
 * This file was automatically generated by EvoSuite
 * Tue May 27 00:38:46 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.BenchPress;
import com.mycompany.solucao1.BicepCurls;
import com.mycompany.solucao1.LegPress;
import com.mycompany.solucao1.Utilizador;
import com.mycompany.solucao1.UtilizadorAmador;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.time.chrono.JapaneseDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtivRepsPeso_ESTest extends AtivRepsPeso_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      BenchPress benchPress1 = (BenchPress)benchPress0.clone();
      benchPress1.setPeso(3137.0);
      boolean boolean0 = benchPress0.equals(benchPress1);
      assertEquals(3137.0, benchPress1.getPeso(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Period period0 = Period.ofDays(5018);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 5, 0, 5);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "\nPeso: ", 0, 2254, 5018, localDate0, 'E');
      double double0 = bicepCurls0.consumoCalorias(utilizadorAmador0);
      assertEquals((-14463.327331410828), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      String string0 = benchPress0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Bench press\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.setPeso(7.4320875);
      double double0 = legPress0.getPeso();
      assertEquals(7.4320875, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(0, 0, 0, 1);
      BenchPress benchPress0 = new BenchPress((LocalDateTime) null, localTime0, (-1), 1, (-947.0));
      double double0 = benchPress0.getPeso();
      assertEquals((-947.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", (-203), 966, (-889), localDate0, 't');
      double double0 = legPress0.getFatorPeso(utilizadorAmador0, 0.0, 966);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", (-203), 966, (-889), localDate0, 't');
      double double0 = legPress0.getFatorPeso(utilizadorAmador0, (-203), 966);
      assertEquals(196098.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LocalDate localDate0 = MockLocalDate.ofYearDay(1822, 82);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("\nNome: ", "\nNome: ", "\nNome: ", 146, 1822, 82, localDate0, '7');
      double double0 = legPress0.getFatorPeso(utilizadorProfissional0, 146, 4.0);
      assertEquals((-584.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.equals(legPress0);
      assertEquals(0.0, legPress0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      bicepCurls0.equals(japaneseDate0);
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      BicepCurls bicepCurls0 = new BicepCurls((LocalDateTime) null, localTime0, 2146699114, 2146726457, 2146726457);
      // Undeclared exception!
      try { 
        bicepCurls0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      // Undeclared exception!
      try { 
        bicepCurls0.getFatorPeso((Utilizador) null, 1.0, 0.4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.AtivRepsPeso", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      BenchPress benchPress0 = new BenchPress((LocalDateTime) null, localTime0, 2146706923, 2146706923, 386.7953);
      BenchPress benchPress1 = new BenchPress(benchPress0);
      // Undeclared exception!
      try { 
        benchPress1.equals(benchPress0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      double double0 = legPress0.getPeso();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, (-2614), (-2614), (-2614));
      BenchPress benchPress1 = new BenchPress();
      boolean boolean0 = benchPress0.equals(benchPress1);
      assertFalse(boolean0);
      assertEquals(0.0, benchPress1.getPeso(), 0.01);
      assertEquals((-2614.0), benchPress0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      BenchPress benchPress1 = new BenchPress(benchPress0);
      boolean boolean0 = benchPress1.equals(benchPress0);
      assertTrue(boolean0);
      assertEquals(0.0, benchPress0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      BenchPress benchPress1 = new BenchPress(benchPress0);
      benchPress1.setPeso((-1596.5782174990563));
      boolean boolean0 = benchPress0.equals(benchPress1);
      assertEquals((-1596.5782174990563), benchPress1.getPeso(), 0.01);
      assertFalse(boolean0);
  }
}
