/*
 * This file was automatically generated by EvoSuite
 * Tue May 27 00:37:00 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.Abdominais;
import com.mycompany.solucao1.Atividade;
import com.mycompany.solucao1.BenchPress;
import com.mycompany.solucao1.BicepCurls;
import com.mycompany.solucao1.Btt;
import com.mycompany.solucao1.Ciclismo;
import com.mycompany.solucao1.Corrida;
import com.mycompany.solucao1.Flexoes;
import com.mycompany.solucao1.LegPress;
import com.mycompany.solucao1.Trail;
import com.mycompany.solucao1.Utilizador;
import com.mycompany.solucao1.UtilizadorAmador;
import com.mycompany.solucao1.UtilizadorPraticanteOcasional;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.Period;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Atividade_ESTest extends Atividade_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      Month month0 = Month.AUGUST;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(3, month0, 3, 3, 1, 1);
      BenchPress benchPress1 = new BenchPress(benchPress0);
      benchPress1.setDataRealizacao(localDateTime0);
      int int0 = benchPress0.compareTo((Atividade) benchPress1);
      assertEquals(1, benchPress0.getCodAtividade());
      assertEquals(1, benchPress1.getCodAtividade());
      assertEquals(0, benchPress1.getFreqCardiaca());
      assertEquals(2011, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      Object object0 = legPress0.clone();
      legPress0.setFreqCardiaca((-1458));
      boolean boolean0 = legPress0.equals(object0);
      assertEquals((-1458), legPress0.getFreqCardiaca());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      BenchPress benchPress0 = new BenchPress(localDateTime0, (LocalTime) null, 648, (-1467), 648);
      String string0 = benchPress0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: null\nFrequencia Cardiaca: 648 bpm\nRepeti\u00E7oes: -1467\nPeso: 648.0 kilos\nTipo de atividade: Bench press\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      flexoes0.getTempo();
      assertEquals(0, flexoes0.getFreqCardiaca());
      assertEquals(1, flexoes0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      flexoes0.setFreqCardiaca(5);
      int int0 = flexoes0.getFreqCardiaca();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, (-1923), 247.327);
      int int0 = corrida0.getFreqCardiaca();
      assertEquals(1, corrida0.getCodAtividade());
      assertEquals((-1923), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(3, 3, 3, 3, 3, 3);
      Clock clock0 = MockClock.systemDefaultZone();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 3, 3, 3);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional(" anos\nGenero: ", "hr5xzw&|P^4\"v", "hr5xzw&|P^4\"v", 7, 3814, 0, localDate0, 'b');
      double double0 = benchPress0.getFatorFreqCardiaca(utilizadorPraticanteOcasional0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, benchPress0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(7);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 7, zoneOffset0);
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, 7, 7);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2375L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("&n", "pxR`EO>P", "&n", 45, (-2054), 45, localDate0, 'U');
      double double0 = ciclismo0.getFatorFreqCardiaca(utilizadorAmador0);
      assertEquals(1.6, double0, 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      flexoes0.setFreqCardiaca(5);
      Period period0 = Period.of((-1), (-2557), 2422);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "9", "", (-2465), (-2070), 935, localDate0, 'V');
      double double0 = flexoes0.getFatorFreqCardiaca(utilizadorPraticanteOcasional0);
      assertEquals(5, flexoes0.getFreqCardiaca());
      assertEquals((-198.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      BicepCurls bicepCurls0 = new BicepCurls((LocalDateTime) null, localTime0, (-537), (-537), 2.0);
      bicepCurls0.getDataRealizacao();
      assertEquals((-537), bicepCurls0.getFreqCardiaca());
      assertEquals(1, bicepCurls0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setProximoCodigo(0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Atividade atividade0 = trail0.geraAtividade(utilizadorAmador0, 0);
      assertTrue(atividade0.equals((Object)trail0));
      assertEquals(1, trail0.getCodAtividade());
      assertEquals(0, atividade0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Atividade atividade0 = abdominais0.geraAtividade(utilizadorAmador0, (-2252.77255));
      assertEquals(0, atividade0.getFreqCardiaca());
      assertEquals(2, atividade0.getCodAtividade());
      assertEquals(0, abdominais0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setProximoCodigo((-2901));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Atividade atividade0 = trail0.geraAtividade(utilizadorProfissional0, (-1283));
      assertEquals(0, trail0.getFreqCardiaca());
      assertEquals(0, atividade0.getFreqCardiaca());
      assertEquals((-2901), atividade0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.equals(legPress0);
      assertEquals(0, legPress0.getFreqCardiaca());
      assertEquals(1, legPress0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1617L);
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Trail trail0 = new Trail(localDateTime0, localTime0, (-161), 0.0, (-161));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = trail0.consumoCalorias(utilizadorProfissional0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-161), trail0.getFreqCardiaca());
      assertEquals(1, trail0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Month month0 = Month.MAY;
      LocalDate localDate0 = MockLocalDate.of((-1342), month0, 3);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("\nFrequencia CDrdiaca: ", "z(|>{3i&sSI", "\nFrequencia CDrdiaca: ", 0, (-1342), (-245), localDate0, 'y');
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 2931, 1332, (-865.6198494));
      double double0 = benchPress0.consumoCalorias(utilizadorProfissional0);
      assertEquals(1, benchPress0.getCodAtividade());
      assertEquals(2931, benchPress0.getFreqCardiaca());
      assertEquals(2971.0100164693295, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Month month0 = Month.MAY;
      LocalDate localDate0 = MockLocalDate.of(3, month0, 3);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("\nFrequencia CDrdiaca: ", "z(|>{3i&sSI", "\nFrequencia CDrdiaca: ", 0, 3, (-245), localDate0, 'y');
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 2931, 1332, (-865.6198494));
      double double0 = benchPress0.consumoCalorias(utilizadorProfissional0);
      assertEquals(2931, benchPress0.getFreqCardiaca());
      assertEquals((-1169797.4170970512), double0, 0.01);
      assertEquals(1, benchPress0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(3, 3, 3, 3, 3, 3);
      Clock clock0 = MockClock.systemDefaultZone();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      benchPress0.setDataRealizacao(localDateTime0);
      BenchPress benchPress1 = new BenchPress(localDateTime0, localTime0, 3, 3, 3);
      int int0 = benchPress1.compareTo((Atividade) benchPress0);
      assertEquals(1, int0);
      assertEquals(3, benchPress1.getFreqCardiaca());
      assertEquals(2, benchPress1.getCodAtividade());
      assertEquals(0, benchPress0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = (Btt)btt0.clone();
      assertEquals(1, btt0.getCodAtividade());
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals(1, btt1.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(0L);
      Flexoes flexoes0 = new Flexoes((LocalDateTime) null, localTime0, 0, 0);
      // Undeclared exception!
      try { 
        flexoes0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, (-1923), 0);
      // Undeclared exception!
      try { 
        corrida0.getFatorFreqCardiaca((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      // Undeclared exception!
      try { 
        flexoes0.geraAtividade((Utilizador) null, (-2197.334655));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Flexoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Btt btt0 = new Btt(localDateTime0, (LocalTime) null, 115, 115, 3.5);
      Object object0 = btt0.clone();
      // Undeclared exception!
      try { 
        btt0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      // Undeclared exception!
      try { 
        corrida0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Corrida", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        corrida0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      // Undeclared exception!
      try { 
        corrida0.compareTo((Atividade) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      int int0 = corrida0.getFreqCardiaca();
      assertEquals(1, corrida0.getCodAtividade());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional(" anos\nGenero: ", "hr5xzw&|P^4\"v", "hr5xzw&|P^4\"v", 7, 3814, 0, localDate0, 'b');
      // Undeclared exception!
      try { 
        benchPress0.getFatorFreqCardiaca(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, 70, 325.2);
      corrida0.setTempo(localTime0);
      assertEquals(70, corrida0.getFreqCardiaca());
      assertEquals(1, corrida0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.getDataRealizacao();
      assertEquals(1, legPress0.getCodAtividade());
      assertEquals(0, legPress0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      int int0 = abdominais0.getCodAtividade();
      assertEquals(0, abdominais0.getFreqCardiaca());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Btt btt0 = new Btt(localDateTime0, (LocalTime) null, (-2198), (-2198), (-2198));
      btt0.getTempo();
      assertEquals((-2198), btt0.getFreqCardiaca());
      assertEquals(1, btt0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Trail trail0 = new Trail();
      int int0 = trail0.compareTo((Atividade) trail0);
      assertEquals(0, int0);
      assertEquals(0, trail0.getFreqCardiaca());
      assertEquals(1, trail0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(3, 3, 3, 3, 3, 3);
      LocalTime localTime0 = MockLocalTime.now();
      BenchPress benchPress1 = new BenchPress(localDateTime0, localTime0, 3, 3, 3);
      int int0 = benchPress1.compareTo((Atividade) benchPress0);
      assertEquals((-2011), int0);
      assertEquals(2, benchPress1.getCodAtividade());
      assertEquals(3, benchPress1.getFreqCardiaca());
      assertEquals(0, benchPress0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(3, 3, 3, 3, 3, 3);
      BenchPress benchPress1 = new BenchPress(benchPress0);
      assertTrue(benchPress1.equals((Object)benchPress0));
      
      benchPress0.setDataRealizacao(localDateTime0);
      boolean boolean0 = benchPress1.equals(benchPress0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setFreqCardiaca(1272);
      Trail trail1 = new Trail();
      boolean boolean0 = trail0.equals(trail1);
      assertEquals(1272, trail0.getFreqCardiaca());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(3, 3, 3, 3, 3, 3);
      LocalTime localTime0 = MockLocalTime.now();
      BenchPress benchPress1 = new BenchPress(localDateTime0, localTime0, 3, 3, 3);
      benchPress0.equals(benchPress1);
      assertEquals(0, benchPress0.getFreqCardiaca());
      assertEquals(2, benchPress1.getCodAtividade());
      assertEquals(3, benchPress1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      BenchPress benchPress1 = new BenchPress(benchPress0);
      boolean boolean0 = benchPress1.equals(benchPress0);
      assertEquals(1, benchPress1.getCodAtividade());
      assertTrue(benchPress0.equals((Object)benchPress1));
      assertEquals(1, benchPress0.getCodAtividade());
      assertEquals(0, benchPress1.getFreqCardiaca());
      assertTrue(boolean0);
  }
}
