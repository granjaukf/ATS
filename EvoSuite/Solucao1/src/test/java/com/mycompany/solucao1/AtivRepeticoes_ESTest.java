/*
 * This file was automatically generated by EvoSuite
 * Tue May 27 00:39:38 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.Abdominais;
import com.mycompany.solucao1.BenchPress;
import com.mycompany.solucao1.BicepCurls;
import com.mycompany.solucao1.Flexoes;
import com.mycompany.solucao1.LegPress;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtivRepeticoes_ESTest extends AtivRepeticoes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      abdominais1.setRepeticoes(61);
      boolean boolean0 = abdominais1.equals(abdominais0);
      assertEquals(61, abdominais1.getRepeticoes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      String string0 = bicepCurls0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Bicep curls\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1303);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 1303, 1303, 1303);
      int int0 = bicepCurls0.getRepeticoes();
      assertEquals(1303, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      abdominais0.setRepeticoes((-1496));
      int int0 = abdominais0.getRepeticoes();
      assertEquals((-1496), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      flexoes0.setTempo(localTime0);
      double double0 = flexoes0.getFatorRepeticoes(0.0, 0.0);
      assertEquals(0, flexoes0.getRepeticoes());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(7L, 0, zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 0, (-2459), (-1.0));
      double double0 = benchPress0.getFatorRepeticoes((-1.0), 974.338281);
      assertEquals(974.338281, double0, 0.01);
      assertEquals((-2459), benchPress0.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond((-1L), 0, zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 0, (-2459), (-1.0));
      double double0 = benchPress0.getFatorRepeticoes((-1.0), (-1L));
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-2459), benchPress0.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      Abdominais abdominais0 = new Abdominais();
      legPress0.equals(abdominais0);
      assertEquals(0, abdominais0.getRepeticoes());
      assertEquals(0, legPress0.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      abdominais0.setDataRealizacao((LocalDateTime) null);
      // Undeclared exception!
      try { 
        abdominais0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(2691L);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      BenchPress benchPress0 = new BenchPress(localDateTime0, (LocalTime) null, 0, 0, 0);
      // Undeclared exception!
      try { 
        benchPress0.getFatorRepeticoes(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      int int0 = abdominais0.getRepeticoes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      boolean boolean0 = abdominais1.equals(abdominais0);
      assertTrue(abdominais0.equals((Object)abdominais1));
      assertEquals(0, abdominais1.getRepeticoes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      abdominais0.setFreqCardiaca(4208);
      Abdominais abdominais1 = new Abdominais();
      boolean boolean0 = abdominais1.equals(abdominais0);
      assertFalse(boolean0);
      assertEquals(0, abdominais1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(0L);
      Flexoes flexoes0 = new Flexoes((LocalDateTime) null, localTime0, 0, 2057);
      Object object0 = flexoes0.clone();
      // Undeclared exception!
      try { 
        flexoes0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      // Undeclared exception!
      try { 
        flexoes0.getFatorRepeticoes((-1.0), (-1.0));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mycompany.solucao1.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      abdominais0.setRepeticoes(762);
      boolean boolean0 = abdominais1.equals(abdominais0);
      assertEquals(762, abdominais0.getRepeticoes());
      assertFalse(boolean0);
  }
}
