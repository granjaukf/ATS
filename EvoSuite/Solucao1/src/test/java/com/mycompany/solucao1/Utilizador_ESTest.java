/*
 * This file was automatically generated by EvoSuite
 * Tue May 27 00:34:52 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.Abdominais;
import com.mycompany.solucao1.Atividade;
import com.mycompany.solucao1.BicepCurls;
import com.mycompany.solucao1.Flexoes;
import com.mycompany.solucao1.PlanoTreino;
import com.mycompany.solucao1.Utilizador;
import com.mycompany.solucao1.UtilizadorAmador;
import com.mycompany.solucao1.UtilizadorPraticanteOcasional;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.LinkedList;
import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = (UtilizadorProfissional)utilizadorProfissional0.clone();
      utilizadorProfissional1.setGenero('Y');
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals('Y', utilizadorProfissional1.getGenero());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setAltura((-3518));
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertEquals((-3518), utilizadorProfissional1.getAltura());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setPeso(1172.60866);
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertEquals(1172.60866, utilizadorProfissional1.getPeso(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setFreqCardiaca(70);
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals(70, utilizadorProfissional0.getFreqCardiaca());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setCodUtilizador(10);
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals(10, utilizadorProfissional0.getCodUtilizador());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(0, 5);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Y1hwj?)4,Y>V", (String) null, "2T!PrWu@>7q)V", 0, 0, 0, localDate0, ' ');
      double double0 = utilizadorProfissional0.getBMR();
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals("2T!PrWu@>7q)V", utilizadorProfissional0.getEmail());
      assertEquals(' ', utilizadorProfissional0.getGenero());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(10070.0, double0, 0.01);
      assertEquals("Y1hwj?)4,Y>V", utilizadorProfissional0.getNome());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      LocalDate localDate1 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.planoTreinoMaisCalorias(localDate0, localDate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("io*~dbk3!j", "io*~dbk3!j", "io*~dbk3!j", 97, 1, 102, (LocalDate) null, ']');
      LocalDate localDate0 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.allMetrosAltimetria((LocalDate) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      LocalDate localDate0 = MockLocalDate.now();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate1 = MockLocalDate.now(clock0);
      double double0 = utilizadorAmador0.allKmsDistancia(localDate0, localDate1);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 0, 0, 0, localDate0, '>');
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      LocalDate localDate1 = MockLocalDate.now((ZoneId) zoneOffset0);
      utilizadorAmador0.numeroAtividades(localDate0, localDate1);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals('>', utilizadorAmador0.getGenero());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      utilizadorAmador0.getPlanoTreinoId((-443));
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 4756, 4756, 4756, localDate0, '@');
      Object object0 = utilizadorAmador0.utilizadorNumPeriodo(localDate0, localDate0);
      assertEquals(4756, utilizadorAmador0.getFreqCardiaca());
      assertEquals(4756.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(4756, utilizadorAmador0.getAltura());
      assertEquals('@', utilizadorAmador0.getGenero());
      assertTrue(object0.equals((Object)utilizadorAmador0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, (String) null, (String) null, 0, 0, 0, localDate0, '~');
      String string0 = utilizadorProfissional0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: null\nMorada: null\nEmail: null\nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: ~\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Profissional\n", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate1 = MockLocalDate.now(clock0);
      List<PlanoTreino> list0 = utilizadorAmador0.planosTreinos(localDate0, localDate1);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(1, list0.size());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(681L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nNome: ", "\nNome: ", ";XyNRD*TxHd", 0, 0, 193, localDate0, 'u');
      double double0 = utilizadorAmador0.getPeso();
      assertEquals(0.0, double0, 0.01);
      assertEquals(";XyNRD*TxHd", utilizadorAmador0.getEmail());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(193, utilizadorAmador0.getAltura());
      assertEquals("\nNome: ", utilizadorAmador0.getNome());
      assertEquals("\nNome: ", utilizadorAmador0.getMorada());
      assertEquals('u', utilizadorAmador0.getGenero());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("!", "!", "!", 'c', 2, 2, localDate0, 'c');
      double double0 = utilizadorProfissional0.getPeso();
      assertEquals('c', utilizadorProfissional0.getGenero());
      assertEquals(2, utilizadorProfissional0.getAltura());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(99, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 5, 38, 3, localDate0, 'N');
      utilizadorAmador0.setNome("X@");
      utilizadorAmador0.getNome();
      assertEquals(3, utilizadorAmador0.getAltura());
      assertEquals(5, utilizadorAmador0.getFreqCardiaca());
      assertEquals(38.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('N', utilizadorAmador0.getGenero());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.getNome();
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1838L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Ha", "|L", "Ha", 0, 0, 5, localDate0, 'O');
      String string0 = utilizadorAmador0.getMorada();
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("|L", string0);
      assertEquals("Ha", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("Ha", utilizadorAmador0.getEmail());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(5, utilizadorAmador0.getAltura());
      assertEquals('O', utilizadorAmador0.getGenero());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.getMorada();
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      int int0 = utilizadorPraticanteOcasional0.getIdade();
      assertEquals(0, int0);
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      System.setCurrentTimeMillis((-1L));
      int int0 = utilizadorPraticanteOcasional0.getIdade();
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals((-45), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Period period0 = Period.of(5, 6, 50);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", " ^oq$^nj", (-2636), (-2636), (-75), localDate0, '}');
      char char0 = utilizadorPraticanteOcasional0.getGenero();
      assertEquals('}', char0);
      assertEquals((-2636.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(" ^oq$^nj", utilizadorPraticanteOcasional0.getEmail());
      assertEquals("", utilizadorPraticanteOcasional0.getNome());
      assertEquals((-2636), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals("", utilizadorPraticanteOcasional0.getMorada());
      assertEquals((-75), utilizadorPraticanteOcasional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Period period0 = Period.ofWeeks(868);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador(",LYX4.1", ",LYX4.1", ",LYX4.1", 6, 868, 868, localDate0, 'B');
      char char0 = utilizadorAmador0.getGenero();
      assertEquals(6, utilizadorAmador0.getFreqCardiaca());
      assertEquals(868, utilizadorAmador0.getAltura());
      assertEquals('B', char0);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(868.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1532L);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "Utilizador\nCodigo de Utilizador: 1\nNome: \nMorada: jBh+wh7le<*2\nEmail: \nFrequencia Cardiaca: -113 bpm\nPeso: -113.0 kilos\nAltura: 1 centimetros\nData de nascimento 13/03/1974\nIdade: 40 anos\nGenero: X\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Amador\n", "", 1, 'X', 'X', localDate0, 'X');
      int int0 = utilizadorProfissional0.getFreqCardiaca();
      assertEquals("", utilizadorProfissional0.getNome());
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: \nMorada: jBh+wh7le<*2\nEmail: \nFrequencia Cardiaca: -113 bpm\nPeso: -113.0 kilos\nAltura: 1 centimetros\nData de nascimento 13/03/1974\nIdade: 40 anos\nGenero: X\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Amador\n", utilizadorProfissional0.getMorada());
      assertEquals(1, int0);
      assertEquals(88, utilizadorProfissional0.getAltura());
      assertEquals('X', utilizadorProfissional0.getGenero());
      assertEquals("", utilizadorProfissional0.getEmail());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(88.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", (String) null, "\nFrequencia Cardiaca: ", (-1859), (-197), 5, localDate0, '(');
      int int0 = utilizadorAmador0.getFreqCardiaca();
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals((-1859), int0);
      assertEquals((-197.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("\nFrequencia Cardiaca: ", utilizadorAmador0.getEmail());
      assertEquals('(', utilizadorAmador0.getGenero());
      assertEquals(5, utilizadorAmador0.getAltura());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 5, 38, 3, localDate0, 'N');
      utilizadorAmador0.getFatorMultiplicativo();
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals('N', utilizadorAmador0.getGenero());
      assertEquals(3, utilizadorAmador0.getAltura());
      assertEquals(5, utilizadorAmador0.getFreqCardiaca());
      assertEquals(38.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(626, 10);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, "I|80_aQm)9", (String) null, 0, 10, 626, localDate0, '#');
      String string0 = utilizadorPraticanteOcasional0.getEmail();
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(626, utilizadorPraticanteOcasional0.getAltura());
      assertEquals('#', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(10.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("muLIR-_mZjk", "muLIR-_mZjk", "muLIR-_mZjk", (-1686), (-958), 0, (LocalDate) null, '`');
      utilizadorAmador0.getEmail();
      assertEquals('`', utilizadorAmador0.getGenero());
      assertEquals((-1686), utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-958.0), utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("ncj", "", "\nAtividades: \n", 1, 1908874353, 6, (LocalDate) null, 't');
      utilizadorProfissional0.getDataNascimento();
      assertEquals("", utilizadorProfissional0.getMorada());
      assertEquals(6, utilizadorProfissional0.getAltura());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals('t', utilizadorProfissional0.getGenero());
      assertEquals(1.908874353E9, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals("\nAtividades: \n", utilizadorProfissional0.getEmail());
      assertEquals("ncj", utilizadorProfissional0.getNome());
      assertEquals(1, utilizadorProfissional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      int int0 = utilizadorAmador0.getCodUtilizador();
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, int0);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Period period0 = Period.of(5, 6, 50);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", " ^oq$^nj", (-2636), (-2636), (-75), localDate0, '}');
      utilizadorPraticanteOcasional0.setProximoCodigo((-75));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador(" centimetr{s\nData de nascimento ", "ue_6", "", 5, 4, (-2447), localDate0, 'l');
      int int0 = utilizadorAmador0.getCodUtilizador();
      assertEquals(4.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals((-75), int0);
      assertEquals(" centimetr{s\nData de nascimento ", utilizadorAmador0.getNome());
      assertEquals(5, utilizadorAmador0.getFreqCardiaca());
      assertEquals("ue_6", utilizadorAmador0.getMorada());
      assertEquals('l', utilizadorAmador0.getGenero());
      assertEquals((-2447), utilizadorAmador0.getAltura());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      utilizadorAmador0.getAtividadesPlanoTreino();
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Abdominais abdominais0 = new Abdominais();
      utilizadorAmador0.addAtividade(abdominais0);
      utilizadorAmador0.getAtividadesIsoladas();
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      int int0 = utilizadorAmador0.getAltura();
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", (String) null, "", (-2193), (-123), (-123), localDate0, 'r');
      int int0 = utilizadorPraticanteOcasional0.getAltura();
      assertEquals('r', utilizadorPraticanteOcasional0.getGenero());
      assertEquals((-123.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals((-123), int0);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals((-2193), utilizadorPraticanteOcasional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "[EG<A/BqG<bUnHa|,", "?Dw~p,z[q4b~3Ihk", (-987), 91, (-462), localDate0, '\\');
      utilizadorAmador0.equals(utilizadorAmador0);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("?Dw~p,z[q4b~3Ihk", utilizadorAmador0.getEmail());
      assertEquals("[EG<A/BqG<bUnHa|,", utilizadorAmador0.getMorada());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals((-462), utilizadorAmador0.getAltura());
      assertEquals((-987), utilizadorAmador0.getFreqCardiaca());
      assertEquals('\\', utilizadorAmador0.getGenero());
      assertEquals(91.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Period period0 = Period.of(0, 0, 0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("com.mycompany.solucao1.AtivRepeticoes", "", (String) null, 0, 0, 0, localDate0, 's');
      utilizadorPraticanteOcasional0.equals("com.mycompany.solucao1.AtivRepeticoes");
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('s', utilizadorPraticanteOcasional0.getGenero());
      assertEquals("com.mycompany.solucao1.AtivRepeticoes", utilizadorPraticanteOcasional0.getNome());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals("", utilizadorPraticanteOcasional0.getMorada());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Period period0 = Period.of(5, 6, 50);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", " ^oq$^nj", (-2636), (-2636), (-75), localDate0, '}');
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorPraticanteOcasional0.addAtividade(bicepCurls0);
      List<Atividade> list0 = utilizadorPraticanteOcasional0.allAtividades(localDate0, localDate0);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(1, list0.size());
      assertEquals((-2636), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('}', utilizadorPraticanteOcasional0.getGenero());
      assertEquals((-2636.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(" ^oq$^nj", utilizadorPraticanteOcasional0.getEmail());
      assertEquals("", utilizadorPraticanteOcasional0.getMorada());
      assertEquals("", utilizadorPraticanteOcasional0.getNome());
      assertEquals((-75), utilizadorPraticanteOcasional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", 5, 4311, 5, (LocalDate) null, 'b');
      // Undeclared exception!
      try { 
        utilizadorProfissional0.utilizadorNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.totalCaloriasDispendidas((LocalDate) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setDataNascimento((LocalDate) null);
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      // Undeclared exception!
      try { 
        utilizadorAmador0.planosTreinos(localDate0, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.numeroAtividades((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1532L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "jBh+wh7le<*2", "", (-113), (-113), 1, localDate0, 'X');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) null);
      BiFunction<Atividade, Utilizador, Flexoes> biFunction0 = (BiFunction<Atividade, Utilizador, Flexoes>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        utilizadorAmador0.infoDasAtividadesUtilizadorNumPeriodoQueRespeitamP((LocalDate) null, localDate0, predicate0, biFunction0, (Utilizador) utilizadorProfissional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorPraticanteOcasional0);
      Function<Atividade, Abdominais> function0 = (Function<Atividade, Abdominais>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.infoDasAtividadesNumPeriodoQueRespeitamP((LocalDate) null, (LocalDate) null, predicate0, function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("VN&=ncwu]$._Z", "Lm4x(9?", "VN&=ncwu]$._Z", 0, 0, 0, (LocalDate) null, '_');
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.getIdade();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("muLIR-_mZjk", "muLIR-_mZjk", "muLIR-_mZjk", (-1686), (-958), 0, (LocalDate) null, '`');
      // Undeclared exception!
      try { 
        utilizadorAmador0.getBMR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      BicepCurls bicepCurls0 = new BicepCurls();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) bicepCurls0);
      // Undeclared exception!
      try { 
        utilizadorProfissional0.atividadesNumPeriodoQueRespeitamP((LocalDate) null, (LocalDate) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(0, 5);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Y1hwj?)4,Y>V", (String) null, "2T!PrWu@>7q)V", 0, 0, 0, localDate0, ' ');
      Abdominais abdominais0 = new Abdominais();
      utilizadorProfissional0.addAtividade(abdominais0);
      // Undeclared exception!
      try { 
        utilizadorProfissional0.atividadesIsoladas(localDate0, localDate0, (Predicate<Atividade>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        utilizadorAmador0.allKmsDistancia((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.addPlanoTreino((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.addAtividadePlanoTreino(1742, (Atividade) null, 70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("ncj", "", "\nAtividades: \n", 1, 1908874353, 6, (LocalDate) null, 't');
      // Undeclared exception!
      try { 
        utilizadorProfissional0.addAtividade((Atividade) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("EFIs'Y'{XVLz]iW=", "", "EFIs'Y'{XVLz]iW=", (-2309), (-2309), 1, localDate0, '_');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate0);
      utilizadorAmador0.atividadesNumPeriodoQueRespeitamP(localDate0, localDate0, predicate0);
      assertEquals((-2309), utilizadorAmador0.getFreqCardiaca());
      assertEquals("EFIs'Y'{XVLz]iW=", utilizadorAmador0.getNome());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-2309.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('_', utilizadorAmador0.getGenero());
      assertEquals(1, utilizadorAmador0.getAltura());
      assertEquals("EFIs'Y'{XVLz]iW=", utilizadorAmador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nRepeti\u00E7oes: ", "\nRepeti\u00E7oes: ", "sa5jCz", 77, 266, 266, localDate0, 'f');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) "sa5jCz");
      Function<Atividade, PlanoTreino> function0 = (Function<Atividade, PlanoTreino>) mock(Function.class, new ViolatedAssumptionAnswer());
      utilizadorAmador0.infoDasAtividadesNumPeriodoQueRespeitamP(localDate0, localDate0, predicate0, function0);
      assertEquals(266.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(266, utilizadorAmador0.getAltura());
      assertEquals(77, utilizadorAmador0.getFreqCardiaca());
      assertEquals('f', utilizadorAmador0.getGenero());
      assertEquals("\nRepeti\u00E7oes: ", utilizadorAmador0.getMorada());
      assertEquals("\nRepeti\u00E7oes: ", utilizadorAmador0.getNome());
      assertEquals("sa5jCz", utilizadorAmador0.getEmail());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, (String) null, (String) null, (-1), (-1), (-4009), localDate0, '7');
      char char0 = utilizadorProfissional0.getGenero();
      assertEquals((-4009), utilizadorProfissional0.getAltura());
      assertEquals((-1), utilizadorProfissional0.getFreqCardiaca());
      assertEquals((-1.0), utilizadorProfissional0.getPeso(), 0.01);
      assertEquals('7', char0);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", (String) null, "", (-2193), (-123), (-123), localDate0, 'r');
      String string0 = utilizadorPraticanteOcasional0.getMorada();
      assertEquals('r', utilizadorPraticanteOcasional0.getGenero());
      assertEquals((-123), utilizadorPraticanteOcasional0.getAltura());
      assertEquals((-123.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals((-2193), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, (String) null, (String) null, 0, 0, 0, localDate0, '~');
      int int0 = utilizadorProfissional0.getFreqCardiaca();
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(0, int0);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals('~', utilizadorProfissional0.getGenero());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1532L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "jBh+wh7le<*2", "", (-113), (-113), 1, localDate0, 'X');
      utilizadorAmador0.getAtividadesPlanoTreino();
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals((-113.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(1, utilizadorAmador0.getAltura());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("jBh+wh7le<*2", utilizadorAmador0.getMorada());
      assertEquals((-113), utilizadorAmador0.getFreqCardiaca());
      assertEquals('X', utilizadorAmador0.getGenero());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 0, 0, 0, localDate0, '>');
      int int0 = utilizadorAmador0.getIdade();
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals('>', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(44, int0);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nRepeti\u00E7oes: ", "\nRepeti\u00E7oes: ", "sa5jCz", 77, 266, 266, localDate0, 'f');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) "sa5jCz");
      utilizadorAmador0.atividadesIsoladas(localDate0, localDate0, predicate0);
      assertEquals("\nRepeti\u00E7oes: ", utilizadorAmador0.getMorada());
      assertEquals(77, utilizadorAmador0.getFreqCardiaca());
      assertEquals("sa5jCz", utilizadorAmador0.getEmail());
      assertEquals(266.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals("\nRepeti\u00E7oes: ", utilizadorAmador0.getNome());
      assertEquals(266, utilizadorAmador0.getAltura());
      assertEquals('f', utilizadorAmador0.getGenero());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, (String) null, (String) null, 0, 0, 0, localDate0, '~');
      utilizadorProfissional0.getAtividadesIsoladas();
      assertEquals('~', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.getDataNascimento();
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("EFIs'Y'{XVLz]iW=", "", "EFIs'Y'{XVLz]iW=", (-2309), (-2309), 1, localDate0, '_');
      int int0 = utilizadorAmador0.getAltura();
      assertEquals((-2309), utilizadorAmador0.getFreqCardiaca());
      assertEquals("EFIs'Y'{XVLz]iW=", utilizadorAmador0.getNome());
      assertEquals((-2309.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(1, int0);
      assertEquals('_', utilizadorAmador0.getGenero());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("EFIs'Y'{XVLz]iW=", utilizadorAmador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, (String) null, (String) null, 0, 0, 0, localDate0, '~');
      utilizadorProfissional0.getNome();
      assertEquals('~', utilizadorProfissional0.getGenero());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-2651));
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", (String) null, (-2607), (-2651), (-2607), localDate0, 'u');
      int int0 = utilizadorProfissional0.getCodUtilizador();
      assertEquals(1, int0);
      assertEquals((-2607), utilizadorProfissional0.getAltura());
      assertEquals('u', utilizadorProfissional0.getGenero());
      assertEquals((-2651.0), utilizadorProfissional0.getPeso(), 0.01);
      assertEquals((-2607), utilizadorProfissional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional(".WfI*CsgG'Y9XTf7", "!", ".WfI*CsgG'Y9XTf7", (-1932), (-1391), 2, localDate0, 'c');
      double double0 = utilizadorProfissional0.getPeso();
      assertEquals(".WfI*CsgG'Y9XTf7", utilizadorProfissional0.getEmail());
      assertEquals((-1391.0), double0, 0.01);
      assertEquals("!", utilizadorProfissional0.getMorada());
      assertEquals(".WfI*CsgG'Y9XTf7", utilizadorProfissional0.getNome());
      assertEquals(2, utilizadorProfissional0.getAltura());
      assertEquals((-1932), utilizadorProfissional0.getFreqCardiaca());
      assertEquals('c', utilizadorProfissional0.getGenero());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.getEmail();
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setGenero('Y');
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertEquals('Y', utilizadorProfissional1.getGenero());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      System.setCurrentTimeMillis((-1L));
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals(0, utilizadorProfissional1.getCodUtilizador());
      assertFalse(boolean0);
      assertEquals('\u0000', utilizadorProfissional1.getGenero());
      assertEquals(0, utilizadorProfissional1.getAltura());
      assertEquals(0.0, utilizadorProfissional1.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setAltura(3035);
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertEquals(3035, utilizadorProfissional1.getAltura());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      utilizadorProfissional1.setFreqCardiaca(24);
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals(24, utilizadorProfissional1.getFreqCardiaca());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
      
      utilizadorProfissional0.setMorada("sN%7T)I^':,");
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
      
      utilizadorProfissional1.setNome(";&w");
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertEquals('\u0000', utilizadorProfissional1.getGenero());
      assertEquals(0, utilizadorProfissional1.getAltura());
      assertEquals(0, utilizadorProfissional1.getFreqCardiaca());
      assertEquals(0.0, utilizadorProfissional1.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional1.getCodUtilizador());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
      
      utilizadorProfissional1.setEmail("Utilizador\nCodigo de Utilizador: 0\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: \u0000\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Profissional\n");
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      String string0 = utilizadorAmador0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 0\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: \u0000\nAtividades: \n\nPlanos de treino: \nPlano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n\nTipo de Utilizador: Amador\n", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Period period0 = Period.of((-2632), (-2632), (-2632));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", (-2632), (-2632), (-2632), localDate0, '}');
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorPraticanteOcasional0.addAtividade(bicepCurls0);
      String string0 = utilizadorPraticanteOcasional0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: -2632 bpm\nPeso: -2632.0 kilos\nAltura: -2632 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: }\nAtividades: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Bicep curls\n\nPlanos de treino: \n\nTipo de Utilizador: Praticante Ocasional\n", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", (-8), (-8), (-8), localDate0, 'F');
      double double0 = utilizadorProfissional0.getBMR();
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals((-291.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.setGenero('M');
      double double0 = utilizadorAmador0.getBMR();
      assertEquals('M', utilizadorAmador0.getGenero());
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-28L));
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      List<Atividade> list0 = utilizadorAmador0.allAtividades(localDate0, localDate0);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertTrue(list0.isEmpty());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorAmador0);
      BiFunction<Atividade, Utilizador, LinkedList<UtilizadorPraticanteOcasional>> biFunction0 = (BiFunction<Atividade, Utilizador, LinkedList<UtilizadorPraticanteOcasional>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      utilizadorAmador0.infoDasAtividadesUtilizadorNumPeriodoQueRespeitamP(localDate0, localDate0, predicate0, biFunction0, (Utilizador) utilizadorAmador0);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      utilizadorAmador0.getPlanoTreinoId(0);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      utilizadorAmador0.getPlanoTreinoId(408);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Period period0 = Period.of((-2632), (-2632), (-2632));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", (-2632), (-2632), (-2632), localDate0, '}');
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorPraticanteOcasional0.addAtividade(bicepCurls0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = (UtilizadorPraticanteOcasional)utilizadorPraticanteOcasional0.clone();
      assertEquals((-2632), utilizadorPraticanteOcasional0.getAltura());
      assertEquals((-2632), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertTrue(utilizadorPraticanteOcasional1.equals((Object)utilizadorPraticanteOcasional0));
      assertEquals('}', utilizadorPraticanteOcasional1.getGenero());
      assertEquals((-2632.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = utilizadorAmador0.getBMR();
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      UtilizadorAmador utilizadorAmador1 = (UtilizadorAmador)utilizadorAmador0.clone();
      assertTrue(utilizadorAmador1.equals((Object)utilizadorAmador0));
      assertEquals(0, utilizadorAmador1.getCodUtilizador());
      assertEquals('\u0000', utilizadorAmador1.getGenero());
      assertEquals(0, utilizadorAmador1.getAltura());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorPraticanteOcasional0.addAtividadePlanoTreino((-1623), bicepCurls0, (-1623));
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Period period0 = Period.of((-2632), (-2632), (-2632));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", (-2632), (-2632), (-2632), localDate0, '}');
      double double0 = utilizadorPraticanteOcasional0.totalCaloriasDispendidas(localDate0, localDate0);
      assertEquals('}', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals((-2632.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2632), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals((-2632), utilizadorPraticanteOcasional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      utilizadorAmador0.planosTreinos(localDate0, (LocalDate) null);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setPeso((-5L));
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals((-5.0), utilizadorProfissional0.getPeso(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setCodUtilizador((-24));
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals((-24), utilizadorProfissional0.getCodUtilizador());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(0, 5);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Y1hwj?#4,2>V", "Y1hwj?#4,2>V", "Y1hwj?#4,2>V", 0, 0, 0, localDate0, ' ');
      utilizadorProfissional0.allMetrosAltimetria(localDate0, localDate0);
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(' ', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getAltura());
  }
}
