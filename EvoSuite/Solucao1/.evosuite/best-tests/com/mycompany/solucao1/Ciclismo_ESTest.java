/*
 * This file was automatically generated by EvoSuite
 * Fri May 30 18:25:33 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.Ciclismo;
import com.mycompany.solucao1.Trail;
import com.mycompany.solucao1.Utilizador;
import com.mycompany.solucao1.UtilizadorAmador;
import com.mycompany.solucao1.UtilizadorPraticanteOcasional;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Ciclismo_ESTest extends Ciclismo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      LocalDate localDate0 = MockLocalDate.ofYearDay(926, 1);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("'=y,RvBL;d#e]Mh", "'=y,RvBL;d#e]Mh", "'=y,RvBL;d#e]Mh", 926, 926, 926, localDate0, ':');
      Ciclismo ciclismo1 = (Ciclismo)ciclismo0.geraAtividade(utilizadorPraticanteOcasional0, 1);
      assertEquals(0.0, ciclismo1.getDistancia(), 0.01);
      assertTrue(ciclismo1.equals((Object)ciclismo0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      ciclismo0.setProximoCodigo(0);
      Ciclismo ciclismo1 = (Ciclismo)ciclismo0.geraAtividade(utilizadorPraticanteOcasional0, (-83.7));
      assertEquals(0, ciclismo1.getFreqCardiaca());
      assertEquals((-2.2548578304E10), ciclismo1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1L);
      Trail trail0 = new Trail(localDateTime0, localTime0, (-811), 1L, 1L);
      trail0.setProximoCodigo((-811));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Ciclismo ciclismo1 = (Ciclismo)ciclismo0.geraAtividade(utilizadorAmador0, 0.0);
      assertTrue(ciclismo1.equals((Object)ciclismo0));
      assertEquals(0.0, ciclismo1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, 25, 0.11);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = ciclismo0.consumoCalorias(utilizadorProfissional0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Ciclismo ciclismo0 = new Ciclismo((LocalDateTime) null, localTime0, 472, (-2598.669416257));
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional(".!k(5=|M8,t", "", ".!k(5=|M8,t", (-2002), 472, 0, localDate0, 'H');
      double double0 = ciclismo0.consumoCalorias(utilizadorProfissional0);
      assertEquals((-49454.55671950838), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Ciclismo ciclismo0 = new Ciclismo((LocalDateTime) null, localTime0, (-705), (-305.38));
      // Undeclared exception!
      try { 
        ciclismo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      // Undeclared exception!
      try { 
        ciclismo0.geraAtividade((Utilizador) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Ciclismo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      Ciclismo ciclismo1 = new Ciclismo();
      ciclismo1.setTempo((LocalTime) null);
      // Undeclared exception!
      try { 
        ciclismo1.equals(ciclismo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      // Undeclared exception!
      try { 
        ciclismo0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Ciclismo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ciclismo ciclismo0 = null;
      try {
        ciclismo0 = new Ciclismo((Ciclismo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      Ciclismo ciclismo1 = new Ciclismo(ciclismo0);
      assertTrue(ciclismo1.equals((Object)ciclismo0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      boolean boolean0 = ciclismo0.equals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      boolean boolean0 = ciclismo0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      boolean boolean0 = ciclismo0.equals(ciclismo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, (-2538), (-2538));
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, (String) null, "", (-1442), (-1442), (-1), localDate0, '0');
      double double0 = ciclismo0.consumoCalorias(utilizadorProfissional0);
      assertEquals(33683.32516796876, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        ciclismo0.consumoCalorias(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      String string0 = ciclismo0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\n", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      Ciclismo ciclismo1 = (Ciclismo)ciclismo0.clone();
      assertTrue(ciclismo1.equals((Object)ciclismo0));
      
      ciclismo1.setFreqCardiaca(31);
      boolean boolean0 = ciclismo0.equals(ciclismo1);
      assertFalse(boolean0);
  }
}
