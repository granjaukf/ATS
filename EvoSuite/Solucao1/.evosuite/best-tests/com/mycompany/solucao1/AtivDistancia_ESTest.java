/*
 * This file was automatically generated by EvoSuite
 * Fri May 30 18:21:18 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.Btt;
import com.mycompany.solucao1.Ciclismo;
import com.mycompany.solucao1.Corrida;
import com.mycompany.solucao1.Trail;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtivDistancia_ESTest extends AtivDistancia_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = new Btt(btt0);
      assertEquals(0.0, btt0.getDistancia(), 0.01);
      
      btt0.setDistancia(Double.NaN);
      boolean boolean0 = btt1.equals(btt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      String string0 = ciclismo0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Btt btt0 = new Btt();
      LocalTime localTime0 = MockLocalTime.now();
      btt0.setTempo(localTime0);
      double double0 = btt0.getVelocidade();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(332L);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, 9, 332L);
      double double0 = ciclismo0.getVelocidade();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, (-365), (-1730.13));
      double double0 = corrida0.getVelocidade();
      assertEquals((-0.02360953043763049), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1L);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, (-1), 0.0);
      double double0 = ciclismo0.getFatorVelocidade((-1), 0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      ciclismo0.setDistancia(245.0578026284549);
      double double0 = ciclismo0.getFatorVelocidade(1.0, 1.0);
      assertEquals(245.0578026284549, ciclismo0.getDistancia(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, 4958, 4958);
      double double0 = ciclismo0.getFatorVelocidade(4958, 680.8465177);
      assertEquals((-3375590.9704693398), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Trail trail0 = new Trail();
      double double0 = trail0.getDistancia();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      LocalTime localTime0 = MockLocalTime.now();
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 1, (-1922.5), 0.0);
      ciclismo0.equals(btt0);
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals((-1922.5), btt0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setTempo((LocalTime) null);
      // Undeclared exception!
      try { 
        btt0.getVelocidade();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.AtivDistancia", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Btt btt0 = new Btt(localDateTime0, (LocalTime) null, (-1073741824), (-1073741824), (-1073741824));
      // Undeclared exception!
      try { 
        btt0.getFatorVelocidade((-1073741824), (-2847.00740899603));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.AtivDistancia", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.fixed(instant0, zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, (-3643), 625.7758137986177, 625.7758137986177);
      double double0 = btt0.getDistancia();
      assertEquals(625.7758137986177, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setDistancia((-955));
      Btt btt1 = new Btt();
      boolean boolean0 = btt1.equals(btt0);
      assertEquals((-955.0), btt0.getDistancia(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida(corrida0);
      boolean boolean0 = corrida1.equals(corrida0);
      assertEquals(0.0, corrida0.getDistancia(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo((LocalDateTime) null, (LocalTime) null, (-1), 0L);
      Ciclismo ciclismo1 = new Ciclismo(ciclismo0);
      // Undeclared exception!
      try { 
        ciclismo1.equals(ciclismo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, 252, 0.0);
      Corrida corrida1 = new Corrida(localDateTime0, localTime0, (-1634), 0.0);
      boolean boolean0 = corrida0.equals(corrida1);
      assertEquals(0.0, corrida1.getDistancia(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.fixed(instant0, zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, (-3643), 625.7758137986177, 625.7758137986177);
      // Undeclared exception!
      try { 
        btt0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1L);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, (-1), 0.0);
      ciclismo0.setDistancia((-1));
      double double0 = ciclismo0.getDistancia();
      assertEquals((-1.0), double0, 0.01);
  }
}
