/*
 * This file was automatically generated by EvoSuite
 * Tue May 27 00:30:49 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.Abdominais;
import com.mycompany.solucao1.Atividade;
import com.mycompany.solucao1.Btt;
import com.mycompany.solucao1.GestorDesportivo;
import com.mycompany.solucao1.PlanoTreino;
import com.mycompany.solucao1.UtilizadorAmador;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoChronology;
import java.util.List;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GestorDesportivo_ESTest extends GestorDesportivo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      LocalDate localDate1 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        gestorDesportivo0.metrosAltimetria(9, localDate1, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2423L);
      // Undeclared exception!
      try { 
        gestorDesportivo0.kmsPercorridos(2717, (LocalDate) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.registaPlanoTreino(0, (-540));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.of(0, 0, 0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepsPesoPlano(0, 0, (LocalDateTime) null, localTime0, 1197, 1330, 1197, (-664));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(482L);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepsPesoPlano(1882, 1078, (LocalDateTime) null, localTime0, 5, 1327, 10.5, 1078);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(426L);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepPlano(1833, 1, localDateTime0, localTime0, 2, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now();
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistAltPlano((-1), 341, localDateTime0, localTime0, 0, 2719.4729, (-1), 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Month month0 = Month.JANUARY;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1724, month0, 2, 2, 1, 7, 509);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistPlano(301, 1562, localDateTime0, (LocalTime) null, 509, (-551.085163), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.registaAtividade(0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      int int0 = gestorDesportivo0.addAtivRepsPeso((LocalDateTime) null, localTime0, 610, 1, 610, 610);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(3225L);
      int int0 = gestorDesportivo0.addAtivRepsPeso(localDateTime0, localTime0, 5, 5, 3225L, 1477);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Instant instant0 = MockInstant.ofEpochSecond((long) (-1672), (long) (-1672));
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      int int0 = gestorDesportivo0.addAtivRepsPeso(localDateTime0, localTime0, (-1672), (-1672), (-1672), 6);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(3225L);
      int int0 = gestorDesportivo0.addAtivRep(localDateTime0, localTime0, 0, (-664), 5);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      int int0 = gestorDesportivo0.addAtivRep(localDateTime0, localTime0, 0, (-1192), 1330);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      int int0 = gestorDesportivo0.addAtivDistAlt(localDateTime0, localTime0, 0, 3881.054241043052, 0, 3250);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(426L);
      int int0 = gestorDesportivo0.addAtivDist(localDateTime0, localTime0, 7, 0.0, 8);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Period period0 = Period.ofWeeks((-690));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      int int0 = gestorDesportivo0.addUtilizador("(Gh[m=}", "(Gh[m=}", "MHV8%Ecm|B", 1310, 77, (-161), localDate0, 'S', 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Period period0 = Period.ofYears((-520));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      int int0 = gestorDesportivo0.addUtilizador("Nao existe utilizador com este codigo\n", "Nao existe plano de treino com este codigo\n", "", 1893, 1515, 806, localDate0, '@', 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        gestorDesportivo0.maisAtividades((LocalDate) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[0];
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("=<CW{\"@ol/u:n\"m<X", "", "", (-3633), (-3633), (-3633), (LocalDate) null, 'A', 808);
      // Undeclared exception!
      try { 
        gestorDesportivo0.showUtilizador(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.listaAtividades((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.guardaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      try { 
        gestorDesportivo0.guardaEstado("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[7];
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      gestorDesportivo0.geraPlanoTreinoUtilizador(8, intArray0, 8, 983, 983, localDate0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        gestorDesportivo0.geraPlanoTreinoUtilizador(4, intArray0, 4, 1, 0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Corrida", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[0];
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.geraPlanoTreinoUtilizador((-1784), intArray0, 1264, 1264, (-1784), localDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Nao existe atividade com este codigo\n");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "0el)/");
      try { 
        gestorDesportivo0.carregaEstado("Nao existe atividade com este codigo\n");
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 30656C29
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      try { 
        gestorDesportivo0.carregaEstado("Nao existe atividade com este codigo\n");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("=<CW{\"@ol/u:n\"m<X", "", "", (-3633), (-3633), (-3633), (LocalDate) null, 'A', 808);
      // Undeclared exception!
      try { 
        gestorDesportivo0.atualizaInfo((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.atividadesUtilizador(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.atividadesExecutadasUtilizador(7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[9];
      intArray0[7] = 2;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(9, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Btt> class0 = Btt.class;
      Function<Atividade, Double> function0 = (Function<Atividade, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      double double0 = gestorDesportivo0.recordDouble(class0, function0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<String> class0 = String.class;
      Function<Atividade, Integer> function0 = (Function<Atividade, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      int int0 = gestorDesportivo0.recordInt(class0, function0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[9];
      intArray0[0] = 9;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(9, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[6];
      intArray0[0] = 8;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[7];
      intArray0[6] = 6;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[8];
      intArray0[7] = 5;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[3];
      intArray0[1] = 4;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[9];
      intArray0[7] = 3;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(9, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      gestorDesportivo0.geraPlanoTreinoUtilizador(10, intArray0, 65, (-1993), (-1.0), (LocalDate) null);
      assertArrayEquals(new int[] {2, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[8];
      intArray0[4] = 1;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.mostraInfo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(3225L);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepPlano(1, 1, localDateTime0, localTime0, 1, 1, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepPlano(4167, 725, localDateTime0, localTime0, 2, 4167, 2371);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now();
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistAltPlano((-1), 808, localDateTime0, localTime0, 808, 0.0, 808, (-2775));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Instant instant0 = MockInstant.ofEpochSecond((long) (-1672), (long) (-1672));
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistPlano((-1672), (-1672), localDateTime0, localTime0, (-1672), (-1672), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now();
      int int0 = gestorDesportivo0.addAtivDistAlt(localDateTime0, localTime0, (-1), (-4146.385), (-1), (-1));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      boolean boolean0 = gestorDesportivo0.existePlano(1170);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      gestorDesportivo0.addAtivRep(localDateTime0, localTime0, 7, 7, 7);
      boolean boolean0 = gestorDesportivo0.existeAtividade(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      boolean boolean0 = gestorDesportivo0.existeAtividade(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      boolean boolean0 = gestorDesportivo0.existeUtilizador((-3633));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addPlanoTreino((LocalDate) null);
      String string0 = gestorDesportivo0.showPlanoTreino(1);
      assertEquals("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: null\nAtividades e suas itera\u00E7oes: \n", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.showPlanoTreino(7);
      assertEquals("Nao existe plano de treino com este codigo\n", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.showAtividade(2);
      assertEquals("Nao existe atividade com este codigo\n", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      gestorDesportivo0.addUtilizador("", "", "#B", 1, 1, 1330, localDate0, 'J', 7);
      String string0 = gestorDesportivo0.showUtilizador(1);
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: \nMorada: \nEmail: #B\nFrequencia Cardiaca: 1 bpm\nPeso: 1.0 kilos\nAltura: 1330 centimetros\nData de nascimento 01/01/1970\nIdade: 44 anos\nGenero: J\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Praticante Ocasional\n", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.showUtilizador((-1));
      assertEquals("Nao existe utilizador com este codigo\n", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.atividadeMaisRealizada();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      PlanoTreino planoTreino0 = gestorDesportivo0.planoTreinoMaisCalorias(localDate0);
      assertNull(planoTreino0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      gestorDesportivo0.addUtilizador("", "", "#B", 1, 1, 1330, localDate0, 'J', 7);
      gestorDesportivo0.atualizaInfo(localDate0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(3225L);
      gestorDesportivo0.addAtivRep(localDateTime0, localTime0, 0, (-664), 0);
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addUtilizador("=<CW{\"@ol/u:n\"m<X", "", "", (-3633), (-3633), (-3633), (LocalDate) null, 'A', 808);
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      double double0 = gestorDesportivo0.recordMaisCalorias(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.addPlanoTreino((LocalDate) null);
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<String> class0 = String.class;
      int int0 = gestorDesportivo0.recordMaisTempo(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<String> class0 = String.class;
      double double0 = gestorDesportivo0.recordMaisPeso(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<UtilizadorAmador> class0 = UtilizadorAmador.class;
      double double0 = gestorDesportivo0.recordMaisDistancia(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<String> class0 = String.class;
      double double0 = gestorDesportivo0.recordMaisVelocidade(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Object> class0 = Object.class;
      int int0 = gestorDesportivo0.recordMaisRepeticoes(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Abdominais> class0 = Abdominais.class;
      double double0 = gestorDesportivo0.recordMaiorAltimetria(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.carregaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        gestorDesportivo0.maisCaloriasGastas(localDate0, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      try { 
        gestorDesportivo0.guardaEstado("com.mycompany.solucao1.GestorDesportivo");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }
}
