/*
 * This file was automatically generated by EvoSuite
 * Tue May 27 00:37:53 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.Atividade;
import com.mycompany.solucao1.BicepCurls;
import com.mycompany.solucao1.LegPress;
import com.mycompany.solucao1.Utilizador;
import com.mycompany.solucao1.UtilizadorAmador;
import com.mycompany.solucao1.UtilizadorPraticanteOcasional;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BicepCurls_ESTest extends BicepCurls_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, (-673), 139, (-673));
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "\nTipo de Utilizador: Amador\n", "=ZcAuG>y7QWHZE&}f2", 0, 139, (-2908), localDate0, 'x');
      BicepCurls bicepCurls1 = (BicepCurls)bicepCurls0.geraAtividade(utilizadorAmador0, (-3542.59246));
      assertEquals(1139, bicepCurls1.getRepeticoes());
      assertEquals(139.0, bicepCurls1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 867, 139, 867);
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("[PL#%SP`W@]6Ch]]", "\nTipo de Utilizador: Amador\n", "[PL#%SP`W@]6Ch]]", 867, 139, 139, localDate0, 'l');
      utilizadorAmador0.addAtividade(bicepCurls0);
      BicepCurls bicepCurls1 = (BicepCurls)bicepCurls0.geraAtividade(utilizadorAmador0, (-3542.59246));
      assertEquals(693.6, bicepCurls1.getPeso(), 0.01);
      assertEquals((-2904), bicepCurls1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      bicepCurls0.setProximoCodigo((-1));
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorProfissional0, (-544.685336129));
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1622);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", 0, 0, 1622, localDate0, '!');
      bicepCurls0.geraAtividade(utilizadorPraticanteOcasional0, 3727.79);
      assertTrue(bicepCurls0.equals((Object)atividade0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, (-673), 139, (-673));
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("[PL#%SP`W@]6Ch]]", "\nTipo de Utilizador: Amador\n", "=ZcAuG>y7QWHZE&}f2", (-673), 139, (-2908), localDate0, 'l');
      double double0 = bicepCurls0.consumoCalorias(utilizadorAmador0);
      assertEquals(92063.16632733814, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, (-673), 139, (-673));
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, (String) null, "2/;Y]:c&+4}%S{6@!5", (-673), (-159072863), 31, localDate0, 'I');
      double double0 = bicepCurls0.consumoCalorias(utilizadorAmador0);
      assertEquals((-1.726974622417388E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(1, 1, 0, 1452);
      BicepCurls bicepCurls0 = new BicepCurls((LocalDateTime) null, localTime0, 0, 10, 700.0);
      // Undeclared exception!
      try { 
        bicepCurls0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      // Undeclared exception!
      try { 
        bicepCurls0.geraAtividade((Utilizador) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.BicepCurls", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.setDataRealizacao((LocalDateTime) null);
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      // Undeclared exception!
      try { 
        bicepCurls1.equals(bicepCurls0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      // Undeclared exception!
      try { 
        bicepCurls0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.BicepCurls", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        bicepCurls0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mycompany.solucao1.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BicepCurls bicepCurls0 = null;
      try {
        bicepCurls0 = new BicepCurls((BicepCurls) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      Object object0 = bicepCurls0.clone();
      assertNotSame(object0, bicepCurls0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      LegPress legPress0 = new LegPress();
      boolean boolean0 = bicepCurls0.equals(legPress0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, (-4), (-4), (-4));
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      boolean boolean0 = bicepCurls0.equals(bicepCurls1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, (-4), (-4), (-4));
      boolean boolean0 = bicepCurls0.equals(bicepCurls0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, (-4), (-4), (-4));
      boolean boolean0 = bicepCurls0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, (-673), 139, (-673));
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("[PL#%SP`W@]6Ch]]", "\nTipo de Utilizador: Amador\n", "=ZcAuG>y7QWHZE&}f2", (-673), 139, (-2908), localDate0, 'l');
      utilizadorAmador0.addAtividade(bicepCurls0);
      BicepCurls bicepCurls1 = (BicepCurls)bicepCurls0.geraAtividade(utilizadorAmador0, (-3542.59246));
      assertEquals((-538.4), bicepCurls1.getPeso(), 0.01);
      assertEquals(1139, bicepCurls1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, (-4), (-4), (-4));
      String string0 = bicepCurls0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: -4 bpm\nRepeti\u00E7oes: -4\nPeso: -4.0 kilos\nTipo de atividade: Bicep curls\n", string0);
  }
}
