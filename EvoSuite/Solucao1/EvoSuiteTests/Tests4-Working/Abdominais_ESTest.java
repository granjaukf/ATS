/*
 * This file was automatically generated by EvoSuite
 * Fri May 30 18:27:48 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.Abdominais;
import com.mycompany.solucao1.Utilizador;
import com.mycompany.solucao1.UtilizadorAmador;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Abdominais_ESTest extends Abdominais_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, (-2170), 1564);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      System.setCurrentTimeMillis(1564);
      Abdominais abdominais1 = (Abdominais)abdominais0.geraAtividade(utilizadorProfissional0, 5.0E-4);
      assertEquals(0, abdominais1.getFreqCardiaca());
      assertEquals(0, abdominais1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      abdominais0.setProximoCodigo(0);
      Abdominais abdominais1 = (Abdominais)abdominais0.geraAtividade(utilizadorProfissional0, 1877.3332100068171);
      assertEquals(Integer.MAX_VALUE, abdominais1.getRepeticoes());
      assertEquals(0, abdominais1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais((LocalDateTime) null, (LocalTime) null, 1, 0);
      abdominais0.setProximoCodigo((-1));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Abdominais abdominais1 = (Abdominais)abdominais0.geraAtividade(utilizadorAmador0, 0);
      assertEquals(0, abdominais1.getRepeticoes());
      assertEquals(0, abdominais1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 3, (-324));
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "com.mycompany.solucao1.UtilizadorPraticanteOcasional", "pH", (-324), 0, (-324), localDate0, '2');
      double double0 = abdominais0.consumoCalorias(utilizadorProfissional0);
      assertEquals(220014.75234375003, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, (-2170), 1564);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      System.setCurrentTimeMillis(1564);
      double double0 = abdominais0.consumoCalorias(utilizadorProfissional0);
      assertEquals((-279.8927083333333), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais((LocalDateTime) null, (LocalTime) null, (-229), (-229));
      // Undeclared exception!
      try { 
        abdominais0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      // Undeclared exception!
      try { 
        abdominais0.geraAtividade((Utilizador) null, 1190.5606652963);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Abdominais", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Object object0 = abdominais0.clone();
      abdominais0.setTempo((LocalTime) null);
      // Undeclared exception!
      try { 
        abdominais0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais((LocalDateTime) null, (LocalTime) null, 1, 0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("S%gI#0jkt_", "S%gI#0jkt_", "VB", 1, 0, (-303), localDate0, 'p');
      // Undeclared exception!
      try { 
        abdominais0.consumoCalorias(utilizadorProfissional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        abdominais0.consumoCalorias(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mycompany.solucao1.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Abdominais abdominais0 = null;
      try {
        abdominais0 = new Abdominais((Abdominais) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      assertEquals(1, abdominais1.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, (-18), (-18));
      boolean boolean0 = abdominais0.equals(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, (-18), (-18));
      boolean boolean0 = abdominais0.equals(abdominais0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, (-18), (-18));
      boolean boolean0 = abdominais0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, (-18), (-18));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = abdominais0.consumoCalorias(utilizadorAmador0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      String string0 = abdominais0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nTipo de atividade: Abdominais\n", string0);
  }
}
