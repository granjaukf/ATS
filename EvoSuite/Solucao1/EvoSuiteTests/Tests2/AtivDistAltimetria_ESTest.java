/*
 * This file was automatically generated by EvoSuite
 * Tue May 27 01:26:17 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.Btt;
import com.mycompany.solucao1.Trail;
import java.time.LocalDateTime;
import java.time.LocalTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtivDistAltimetria_ESTest extends AtivDistAltimetria_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Trail trail0 = new Trail();
      Object object0 = trail0.clone();
      trail0.setAltimetria(48);
      boolean boolean0 = object0.equals(trail0);
      assertEquals(48.0, trail0.getAltimetria(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Trail trail0 = new Trail();
      String string0 = trail0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: Trail\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setAltimetria(48);
      double double0 = trail0.getFatorAltimetria();
      assertEquals(48.0, trail0.getAltimetria(), 0.01);
      assertEquals(0.024, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Trail trail0 = new Trail();
      assertEquals(0.0, trail0.getAltimetria(), 0.01);
      
      trail0.setAltimetria((-1.0));
      double double0 = trail0.getFatorAltimetria();
      assertEquals((-5.0E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Trail trail0 = new Trail((LocalDateTime) null, localTime0, 1, (-1.0), 0.0);
      trail0.setAltimetria((-1391.1856));
      double double0 = trail0.getAltimetria();
      assertEquals((-1391.1856), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(4, 2, 7, 4, 7);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1L);
      Btt btt0 = new Btt(localDateTime0, localTime0, (-2091), 0.22, 0.22);
      btt0.equals(localDateTime0);
      assertEquals(1.1E-4, btt0.getFatorAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setDataRealizacao((LocalDateTime) null);
      Object object0 = trail0.clone();
      // Undeclared exception!
      try { 
        trail0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Trail trail0 = new Trail();
      double double0 = trail0.getAltimetria();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Trail trail0 = new Trail();
      LocalTime localTime0 = MockLocalTime.now();
      Trail trail1 = new Trail((LocalDateTime) null, localTime0, 48, 48, 48);
      boolean boolean0 = trail0.equals(trail1);
      assertFalse(boolean0);
      assertEquals(0.024, trail1.getFatorAltimetria(), 0.01);
      assertEquals(0.0, trail0.getAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Trail trail0 = new Trail();
      Trail trail1 = (Trail)trail0.clone();
      boolean boolean0 = trail0.equals(trail1);
      assertEquals(0.0, trail1.getFatorAltimetria(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Trail trail0 = new Trail();
      Trail trail1 = new Trail(trail0);
      assertEquals(0.0, trail0.getFatorAltimetria(), 0.01);
      
      trail0.setAltimetria((-1.0));
      boolean boolean0 = trail1.equals(trail0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(1, 0, 0, 1211);
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 1906, 1698.14, 0.0);
      // Undeclared exception!
      try { 
        btt0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setAltimetria(2170.81462324226);
      double double0 = trail0.getAltimetria();
      assertEquals(1.08540731162113, trail0.getFatorAltimetria(), 0.01);
      assertEquals(2170.81462324226, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Trail trail0 = new Trail();
      double double0 = trail0.getFatorAltimetria();
      assertEquals(0.0, double0, 0.01);
  }
}
