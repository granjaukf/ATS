/*
 * This file was automatically generated by EvoSuite
 * Tue May 27 01:30:48 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.Corrida;
import com.mycompany.solucao1.Utilizador;
import com.mycompany.solucao1.UtilizadorAmador;
import com.mycompany.solucao1.UtilizadorPraticanteOcasional;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Corrida_ESTest extends Corrida_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setPeso((-1503.0));
      Corrida corrida1 = (Corrida)corrida0.geraAtividade(utilizadorPraticanteOcasional0, 0.0);
      assertEquals(0.0, corrida1.getDistancia(), 0.01);
      assertTrue(corrida1.equals((Object)corrida0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(651L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, (String) null, (String) null, (-1216), 0, 0, localDate0, 'R');
      Corrida corrida1 = (Corrida)corrida0.geraAtividade(utilizadorAmador0, 651L);
      assertEquals(71942.20000000001, corrida1.getDistancia(), 0.01);
      assertEquals(0, corrida1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.of(0, 0, 1);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, 5486, 5486);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      corrida0.setProximoCodigo((-1));
      corrida0.geraAtividade(utilizadorAmador0, 0);
      Corrida corrida1 = (Corrida)corrida0.geraAtividade(utilizadorAmador0, 5.0E-4);
      assertEquals(4.724464023400001E9, corrida1.getDistancia(), 0.01);
      assertEquals(0, corrida1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Corrida corrida0 = new Corrida((LocalDateTime) null, localTime0, 1, 1);
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("e>o7DV;q", "e>o7DV;q", "e>o7DV;q", 1, 1, 1, localDate0, 'h');
      double double0 = corrida0.consumoCalorias(utilizadorProfissional0);
      assertEquals(67.92096157407407, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.of(0, 0, 10, 0);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, (-1), 0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-3037L));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("}zju6A", "}zju6A", "s9Mi%NJ3\"7P", 0, 3015, 0, localDate0, '_');
      double double0 = corrida0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals((-0.95750925925926), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(2034L);
      Corrida corrida0 = new Corrida((LocalDateTime) null, localTime0, (-712), 2034L);
      // Undeclared exception!
      try { 
        corrida0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      // Undeclared exception!
      try { 
        corrida0.geraAtividade((Utilizador) null, 10.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Corrida", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      // Undeclared exception!
      try { 
        corrida0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Corrida", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        corrida0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Corrida corrida0 = null;
      try {
        corrida0 = new Corrida((Corrida) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida(corrida0);
      assertTrue(corrida1.equals((Object)corrida0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Corrida corrida0 = new Corrida((LocalDateTime) null, localTime0, (-2696), (-2696));
      Object object0 = corrida0.clone();
      // Undeclared exception!
      try { 
        corrida0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      boolean boolean0 = corrida0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, (-14), (-14));
      boolean boolean0 = corrida0.equals(corrida0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, (-14), (-14));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      boolean boolean0 = corrida0.equals(utilizadorAmador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, (-14), (-14));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = corrida0.consumoCalorias(utilizadorAmador0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, (-14), (-14));
      String string0 = corrida0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: -14 bpm\nDistancia: -14.0 metros\nTipo de atividade: Corrida\n", string0);
  }
}
