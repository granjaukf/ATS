/*
 * This file was automatically generated by EvoSuite
 * Tue May 27 01:27:11 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.BicepCurls;
import com.mycompany.solucao1.Trail;
import com.mycompany.solucao1.UtilizadorAmador;
import com.mycompany.solucao1.UtilizadorPraticanteOcasional;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.Period;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Trail_ESTest extends Trail_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Trail trail0 = new Trail();
      Period period0 = Period.ofMonths(2147086903);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", 2147086903, 2146996995, 2147086903, localDate0, 'd');
      Trail trail1 = (Trail)trail0.geraAtividade(utilizadorProfissional0, 2147086903);
      assertEquals(0, trail1.getFreqCardiaca());
      assertEquals(778.8000000000001, trail1.getDistancia(), 0.01);
      assertEquals(0.0, trail1.getFatorAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Trail trail0 = new Trail(localDateTime0, localTime0, (-3109), 2000.0, 2000.0);
      double double0 = trail0.getFatorHard();
      assertEquals(1.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Trail trail0 = new Trail((LocalDateTime) null, (LocalTime) null, 665, 665, 665);
      trail0.setAltimetria(1000.0);
      double double0 = trail0.getFatorHard();
      assertEquals(1.15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setProximoCodigo(0);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("&4IMh*}s|NF,AFb", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: Trail\n", "\nPlanos de treino: \n", (-1595), (-744), 6, localDate0, 'b');
      Trail trail1 = (Trail)trail0.geraAtividade(utilizadorProfissional0, 0.0);
      assertTrue(trail1.equals((Object)trail0));
      assertEquals(0.0, trail1.getFatorAltimetria(), 0.01);
      assertEquals(0.0, trail1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Trail trail0 = new Trail((LocalDateTime) null, (LocalTime) null, 665, 665, 665);
      trail0.setProximoCodigo((-1166));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Trail trail1 = (Trail)trail0.geraAtividade(utilizadorPraticanteOcasional0, (-977.3345508271375));
      assertEquals(0.0, trail1.getAltimetria(), 0.01);
      assertEquals(0, trail1.getFreqCardiaca());
      assertEquals((-4.7244640256E9), trail1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(10, month0, 10, 10, 10);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(10);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Trail trail0 = new Trail(localDateTime0, localTime0, (-161), (-688.361), 0.2);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = trail0.consumoCalorias(utilizadorAmador0);
      assertEquals(1.15, trail0.getFatorHard(), 0.01);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Trail trail0 = new Trail((LocalDateTime) null, localTime0, 1, 2.0, 2.0);
      LocalDate localDate0 = MockLocalDate.ofYearDay(7, 1);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, "com.mycompany.solucao1.Trail", 1, 1, 1, localDate0, ')');
      double double0 = trail0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(35980.62720400028, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Trail trail0 = new Trail(localDateTime0, localTime0, 4, 2125.0, 2125.0);
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "\nData e hora: ", "E&m:sFq8t8Rf`vP", 45, 4, (-1666), localDate0, 'O');
      double double0 = trail0.consumoCalorias(utilizadorProfissional0);
      assertEquals((-675174.6441861328), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Trail trail0 = new Trail((LocalDateTime) null, (LocalTime) null, 665, 665, 665);
      // Undeclared exception!
      try { 
        trail0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Trail trail0 = new Trail();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "com.mycompany.solucao1.Trail", (-1498), 5196, 5196, (LocalDate) null, 'K');
      // Undeclared exception!
      try { 
        trail0.geraAtividade(utilizadorAmador0, 1.15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Trail trail0 = new Trail();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorAmador0.addAtividade(bicepCurls0);
      // Undeclared exception!
      try { 
        trail0.geraAtividade(utilizadorAmador0, 0L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.mycompany.solucao1.BicepCurls cannot be cast to com.mycompany.solucao1.Trail
         //
         verifyException("com.mycompany.solucao1.Trail", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setTempo((LocalTime) null);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        trail0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.AtivDistancia", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Trail trail0 = null;
      try {
        trail0 = new Trail((Trail) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Trail trail0 = new Trail();
      assertEquals(1.15, trail0.getFatorHard(), 0.01);
      
      trail0.setAltimetria(1408.0887245857);
      double double0 = trail0.getFatorHard();
      assertEquals(1.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Trail trail0 = new Trail(localDateTime0, (LocalTime) null, 0, 0.0, 0.8);
      Double double0 = new Double(5.0E-4);
      boolean boolean0 = trail0.equals(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Trail trail0 = new Trail(localDateTime0, (LocalTime) null, 0, 0.0, 0.8);
      boolean boolean0 = trail0.equals(trail0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Trail trail0 = new Trail((LocalDateTime) null, (LocalTime) null, 665, 665, 665);
      boolean boolean0 = trail0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setAltimetria(6411.76178445);
      double double0 = trail0.getFatorHard();
      assertEquals(1.35, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Trail trail0 = new Trail();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        trail0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Trail trail0 = new Trail();
      String string0 = trail0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: Trail\n", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Trail trail0 = new Trail();
      Object object0 = trail0.clone();
      assertNotSame(object0, trail0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Trail trail0 = new Trail(localDateTime0, (LocalTime) null, 0, 0.0, 0.8);
      Trail trail1 = new Trail(trail0);
      // Undeclared exception!
      try { 
        trail0.equals(trail1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Atividade", e);
      }
  }
}
