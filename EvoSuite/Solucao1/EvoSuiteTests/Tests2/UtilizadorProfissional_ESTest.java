/*
 * This file was automatically generated by EvoSuite
 * Tue May 27 01:35:08 GMT 2025
 */

package com.mycompany.solucao1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.solucao1.UtilizadorProfissional;
import java.time.LocalDate;
import java.time.Period;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UtilizadorProfissional_ESTest extends UtilizadorProfissional_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Period period0 = Period.ofDays(0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LocalDate localDate1 = MockLocalDate.now();
      Object object0 = utilizadorProfissional0.utilizadorNumPeriodo(localDate0, localDate1);
      assertNotSame(object0, utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("\nTipo de Utilizador: Profissional\n", "\nTipo de Utilizador: Profissional\n", "\nTipo de Utilizador: Profissional\n", (-1), (-1), (-519), (LocalDate) null, 'M');
      // Undeclared exception!
      try { 
        utilizadorProfissional0.utilizadorNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Z&", "Z&", "com.mycompany.solucao1.PlanoTreino$AtividadeIteracoes", 414, 414, 414, (LocalDate) null, 'A');
      // Undeclared exception!
      try { 
        utilizadorProfissional0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = null;
      try {
        utilizadorProfissional0 = new UtilizadorProfissional((UtilizadorProfissional) null, localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = null;
      try {
        utilizadorProfissional0 = new UtilizadorProfissional((UtilizadorProfissional) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-3037L));
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0, localDate0, localDate0);
      assertEquals('\u0000', utilizadorProfissional1.getGenero());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      assertEquals(0, utilizadorProfissional1.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      boolean boolean0 = utilizadorProfissional0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      boolean boolean0 = utilizadorProfissional0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      String string0 = utilizadorProfissional0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 0\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: \u0000\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Profissional\n", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = utilizadorProfissional0.getFatorMultiplicativo();
      assertEquals(1.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LocalDate localDate0 = MockLocalDate.now();
      Object object0 = utilizadorProfissional0.utilizadorNumPeriodo(localDate0, localDate0);
      boolean boolean0 = object0.equals(utilizadorProfissional0);
      assertNotSame(object0, utilizadorProfissional0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("\nAtividades: \n", "\nAtividades: \n", "\nAtividades: \n", (-5), (-5), (-5), (LocalDate) null, 'Y');
      Object object0 = utilizadorProfissional0.clone();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mycompany.solucao1.Utilizador", e);
      }
  }
}
